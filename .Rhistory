date = dates[j])
print(out)
dist <- rbind.data.frame(dist, out)
}}; beep()
dist <- dist %>%
mutate(date = as_date(date))
# Plot
ggplot(dist)+
geom_path(aes(date, dist, group = bird, color=bird))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
# Plot distance moved per day by bird
ggplot(dist)+
geom_path(aes(date, dist, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
head(dist)
View(dist)
temp <- dist %>%
group_by(bird) %>%
summarise(dat = length(unique(date)))
View(temp)
View(dist)
# Plot distance moved per day by bird
ggplot(dist)+
geom_path(aes(date, dist, group = bird, color=bird))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
# Plot distance moved per day by bird smoothed
ggplot(dist)+
geom_smooth(aes(date, dist, group = bird, color=bird))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
dist_day <- read.csv("Output/distance_release.csv")
# Plot average distance from release site per day, smoothed & coloured by individual
ggplot(dist_day)+
geom_smooth(aes(date, mean, group = id, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Mean daily distance from release location (m)")+
scale_colour_viridis_d()
dist_day <- read.csv("Output/distance_release.csv") %>%
mutate(date = as.Date(date))
# Plot average distance from release site per day, smoothed & coloured by individual
ggplot(dist_day)+
geom_smooth(aes(date, mean, group = id, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Mean daily distance from release location (m)")+
scale_colour_viridis_d()
# Plot distance moved per day, smoothed & coloured by release group
ggplot(dist)+
geom_smooth(aes(date, dist, group = id, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))
# Add release group information
group <- data.frame(
id = c("Aurora", "Robin", "Briar", "Nutmeg", "Star",
"Iona", "Sage", "Koda",
"Prem", "Rove", "Brook", "Clover", "Wobbles", "Valentine", "Marmalade"),
release = c(rep("October",5), rep("December",3), rep("January",7)))
dist <- left_join(dist, group)
# Add release group information
group <- data.frame(
bird = c("Aurora", "Robin", "Briar", "Nutmeg", "Star",
"Iona", "Sage", "Koda",
"Prem", "Rove", "Brook", "Clover", "Wobbles", "Valentine", "Marmalade"),
release = c(rep("October",5), rep("December",3), rep("January",7)))
dist <- left_join(dist, group)
# Plot distance moved per day, smoothed & coloured by release group
ggplot(dist)+
geom_smooth(aes(date, dist, group = id, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))
# Plot distance moved per day, smoothed & coloured by release group
ggplot(dist)+
geom_smooth(aes(date, dist, group = bird, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))
# Read in clean data & reformat dates and times to posixct
data <- read.csv("Processed/gpsdata_filtered_98ac.csv") %>%
mutate(DateTime = as.POSIXct(study_local_timestamp,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# Read in clean data & reformat dates and times to posixct
data <- read.csv("Processed/gpsdata_filtered_98ac.csv") %>%
mutate(DateTime = as.POSIXct(study_local_timestamp,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# convert to track
track <- make_track(data, .x = utm_easting,.y= utm_northing,
.t= DateTime, id = id) %>%
nest(data = -"id")
# loop through distance per day per bird üê¢
dates <- unique(data$date)
dist_acc <- data.frame()
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = dates[j])
print(out)
dist <- rbind.data.frame(dist_acc, out)
}}; beep()
dist_acc <- dist_acc %>%
mutate(date = as_date(date))
# loop through distance per day per bird üê¢
dates <- unique(data$date)
dist_acc <- data.frame()
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = dates[j])
print(out)
dist <- rbind.data.frame(dist_acc, out)
}}; beep()
# loop through distance per day per bird üê¢
dates <- unique(data$date)
dist_acc <- data.frame()
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = dates[j])
print(out)
dist_acc <- rbind.data.frame(dist_acc, out)
}}; beep()
# Bird list
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
# loop through distance per day per bird üê¢
dates <- unique(data$date)
dist_acc <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = dates[j])
print(out)
dist_acc <- rbind.data.frame(dist_acc, out)
}}; beep()
dist_acc <- dist_acc %>%
mutate(date = as_date(date)) %>%
rename(dist_acc = dist)
# Compare distance moved per day between filtered SDLfilter only and with veDBA
test <- leftjoin(dist, dist_acc)
# Compare distance moved per day between filtered SDLfilter only and with veDBA
test <- left_join(dist, dist_acc)
ggplot(test)+
geom_point(aes(dist, dist_acc))
View(test)
# Read in clean data & reformat dates and times to posixct
data <- read.csv("Processed/gpsdata_filtered_98.csv") %>%
mutate(DateTime = as.POSIXct(study_local_timestamp,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# convert to track
track <- make_track(data, .x = utm_easting,.y= utm_northing,
.t= DateTime, id = id) %>%
nest(data = -"id")
# loop through distance per day per bird üê¢
dates <- unique(data$date)
dist <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = dates[j])
print(out)
dist <- rbind.data.frame(dist, out)
}}; beep()
ggplot(test)+
geom_point(aes(dist, dist_acc))+
theme_minimal()
# and as an average over the study period
dist_summary <- dist %>%
group_by(bird) %>%
summarise(mean_daily_dist = mean(dist))
# save results
write.csv(dist, "Processed/distance_daily.csv", row.names = FALSE)
write.csv(dist_summary, "Processed/distance_daily_mean.csv", row.names = FALSE)
# Compare distance moved per day between filtered SDLfilter only and with veDBA
test <- left_join(dist, dist_acc)
ggplot(test)+
geom_point(aes(dist, dist_acc))+
theme_minimal()
ggplot(test)+
geom_point(aes(dist, dist_acc))+
geom_smooth(aes(dist, dist_acc))
ggplot(test)+
geom_point(aes(dist, dist_acc))+
geom_smooth(aes(dist, dist_acc), method = "lm")
ggplot(test)+
geom_point(aes(dist, dist_acc))+
geom_smooth(aes(dist, dist_acc), method = "lm")+
theme_minimal()
dist2 <- dist
dist <- dist_acc
# save results
write.csv(dist, "Processed/distance_daily.csv", row.names = FALSE)
# and as an average over the study period
dist_summary <- dist %>%
group_by(bird) %>%
summarise(mean_daily_dist = mean(dist))
# and as an average over the study period
dist_summary <- dist %>%
group_by(id) %>%
summarise(mean_daily_dist = mean(dist))
View(dist)
dist <- dist %>%
rename(dist = dist_acc)
# and as an average over the study period
dist_summary <- dist %>%
group_by(bird) %>%
summarise(mean_daily_dist = mean(dist))
dist2 <- dist2 %>%
rename(dist = dist_wo_acc)
dist2 <- dist2 %>%
rename(dist_wo_acc = dist)
# and as an average over the study period
dist_summary <- dist %>%
group_by(bird) %>%
summarise(mean_daily_dist = mean(dist))
# save results
write.csv(dist, "Processed/distance_daily.csv", row.names = FALSE)
write.csv(dist_summary, "Processed/distance_daily_mean.csv", row.names = FALSE)
# Compare distance moved per day between filtered SDLfilter only and with veDBA
test <- left_join(dist, dist2)
ggplot(test)+
geom_point(aes(dist, dist_wo_acc))+
geom_smooth(aes(dist, dist_wo_acc), method = "lm")+
theme_minimal()
ggplot(test)+
geom_point(aes(dist_wo_acc, dist))+
geom_smooth(aes(dist_wo_acc, dist), method = "lm")+
theme_minimal()
# Compare distance moved per day between filtered SDLfilter only and with veDBA
compare <- left_join(dist, dist2)
ggplot(compare)+
geom_point(aes(dist_wo_acc, dist))+
geom_smooth(aes(dist_wo_acc, dist), method = "lm")+
theme_minimal()
test <- t.test(compare$dist, compare$dist_wo_acc)
?t.test
test <- t.test(compare$dist, compare$dist_wo_acc, paired = TRUE)
summary(test)
anova(test)
test
test <- t.test(compare$dist, compare$dist_wo_acc, paired = TRUE, alternative = "greater")
test
test <- t.test(compare$dist, compare$dist_wo_acc, paired = TRUE, alternative = "less")
test
View(compare)
mean(compare$dist)
mean(compare$dist_wo_acc)
min(compare$dist)
min(compare$dist_wo_acc)
max(compare$dist_wo_acc)
max(compare$dist)
sd(compare$dist)
sd(compare$dist_wo_acc)
## linear model - does one predict the other?
test2 <- lm(
data = compare
dist ~ dist_wo_acc
## linear model - does one predict the other?
test2 <- lm(
data = compare,
dist ~ dist_wo_acc
)
anova(test2)
## r squared value - how well does one describe the other?
summary(lm(dist ~ dist_wo_acc, data=compare))$r.squared
test1
## paired t.test - are the two measurements the same?
test1 <- t.test(compare$dist, compare$dist_wo_acc, paired = TRUE, alternative = "less")
test1
## paired t.test - are the two measurements the same?
test1 <- t.test(compare$dist, compare$dist_wo_acc, paired = TRUE)
test1
# read in weather data, which are stored by month
weather <- list.files(pattern = "IDC") %>%
map_df(~read_csv(., locale=locale(encoding="latin1"),show_col_types = FALSE)) %>%
mutate(date = as.Date(Date, tryFormats="%d/%m/%Y"))
# Bird list
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
# Read in clean data & reformat dates and times to posixct
data <- read.csv("Processed/gpsdata_filtered_98ac.csv") %>%
mutate(DateTime = as.POSIXct(study_local_timestamp,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# Convert to track (AMT format)
track <- make_track(data, .x = utm_easting,.y= utm_northing,
.t= DateTime, id = id) %>%
nest(data = -"id")
# Loop through distance per day per bird üê¢
dates <- unique(data$date)
dist <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = dates[j])
print(out)
dist <- rbind.data.frame(dist, out)
}}; beep()
dist <- dist %>%
mutate(date = as_date(date))
# Plot distance moved per day, smoothed and coloured by individual
ggplot(dist)+
geom_smooth(aes(date, dist, group = bird, color=bird))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
# Add release group information
group <- data.frame(
bird = c("Aurora", "Robin", "Briar", "Nutmeg", "Star",
"Iona", "Sage", "Koda",
"Prem", "Rove", "Brook", "Clover", "Wobbles", "Valentine", "Marmalade"),
release = c(rep("October",5), rep("December",3), rep("January",7)))
dist <- left_join(dist, group)
# Plot distance moved per day, smoothed & coloured by release group
ggplot(dist)+
geom_smooth(aes(date, dist, group = bird, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))
# and as an average over the study period
dist_summary <- dist %>%
group_by(bird) %>%
summarise(mean_daily_dist = mean(dist))
# save results
write.csv(dist, "Processed/distance_daily.csv", row.names = FALSE)
write.csv(dist_summary, "Processed/distance_daily_mean.csv", row.names = FALSE)
# Read in clean data without acc filter& reformat dates and times to posixct
data <- read.csv("Processed/gpsdata_filtered_98.csv") %>%
mutate(DateTime = as.POSIXct(study_local_timestamp,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# Convert to track
track <- make_track(data, .x = utm_easting,.y= utm_northing,
.t= DateTime, id = id) %>%
nest(data = -"id")
# Loop through distance per day per bird üê¢
dates <- unique(data$date)
dist2 <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = dates[j])
print(out)
dist2 <- rbind.data.frame(dist2, out)
}}; beep()
dist2 <- dist2 %>%
mutate(date = as_date(date)) %>%
rename(dist_wo_acc = dist)
# Compare distance moved per day between filtered SDLfilter only and with veDBA
compare <- left_join(dist, dist2)
## plot
ggplot(compare)+
geom_point(aes(dist_wo_acc, dist))+
geom_smooth(aes(dist_wo_acc, dist), method = "lm")+
theme_minimal()
## plot
ggplot(compare)+
geom_point(aes(dist, dist_wo_acc))+
geom_smooth(aes(dist, dist_wo_acc), method = "lm")+
theme_minimal()
# Run SDLfilter for each bird with the speed thresholds calculated per bird üê¢üê¢
data_filt <- data.frame()
for(i in 1:length(birds)){
subset <- filter(data_raw, id == birds[i])
vmax <- vmax(subset, prob = 0.98)
vmaxlp <- vmaxlp(subset, prob = 0.98)
temp <- ddfilter(subset,
vmax = vmax,
vmaxlp = vmaxlp,
qi = 5,
method = 2)
data_filt <- rbind(data_filt, temp)
}; beep('coin')
# Read in packages
pacman::p_load(amt, beepr, ggmap, glmmTMB, janitor, SDLfilter, solitude, suncalc,
terra, tidyverse)
# Google API key for ggmaps
ggmap::register_google(key = "AIzaSyAH3qnqmxDATEluG8lKt2KtnHKLYJc2WaM")
# Background map Orana zones 1 and 2
map <- get_map(c(144.4360, -37.9000), zoom=14, maptype = "satellite")
# Bird list
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
for(i in 1:length(birds)){
subset <- filter(data_raw, id == birds[i])
vmax <- vmax(subset, prob = 0.98)
vmaxlp <- vmaxlp(subset, prob = 0.98)
temp <- ddfilter(subset,
vmax = vmax,
vmaxlp = vmaxlp,
qi = 5,
method = 2)
data_filt <- rbind(data_filt, temp)
}; beep('coin')
# Import data from movebank and filter to study birds
data_raw <- read.csv("Input/movebank_20221019_20230417.csv") %>%
clean_names() %>%
filter(individual_local_identifier %in% birds) %>%
# Time in posix format
mutate(DateTime = as.POSIXct(study_local_timestamp,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"),
# Rename columns for SDLfilter
id = individual_local_identifier,
lat = location_lat,
lon = location_long,
qi = gps_satellite_count); beep()
# Run SDLfilter for each bird with the speed thresholds calculated per bird üê¢üê¢
data_filt <- data.frame()
for(i in 1:length(birds)){
subset <- filter(data_raw, id == birds[i])
vmax <- vmax(subset, prob = 0.98)
vmaxlp <- vmaxlp(subset, prob = 0.98)
temp <- ddfilter(subset,
vmax = vmax,
vmaxlp = vmaxlp,
qi = 5,
method = 2)
data_filt <- rbind(data_filt, temp)
}; beep('coin')
