days = 1
))
View(out_sum2)
View(out_sum)
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date)
View(out_sum2)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names()
View(survival)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(id = identity) %>%
filter(id %in% birds) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y")) %>%
select(c(id, start_date, end_date, fate))
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate()
View(out_sum2)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(id = identity) %>%
filter(id %in% birds) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y")) %>%
select(c(id, start_date, end_date, alive))
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate()
View(out_sum2)
mutate(days_out_to_dead = ifelse(alive == "N", first_out - end_date, NA)
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate(days_out_to_dead = ifelse(alive == "N", first_out - end_date, NA))
View(out_sum2)
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate(days_out_to_dead = ifelse(alive == "N", end_date - first_out, NA))
View(out_sum2)
View(survival)
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate(days_out_to_dead = ifelse(alive == "y", NA, end_date - first_out))
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(id = identity) %>%
filter(id %in% birds) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y")) %>%
select(c(id, start_date, end_date, alive))
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate(days_out_to_dead = ifelse(alive == "y", NA, end_date - first_out))
View(out_sum2)
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate(days_out_to_dead = ifelse(alive == "y", NA, end_date - first_out))
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate(days_out_to_dead = ifelse(alive == "Y", NA, end_date - first_out))
View(out_sum2)
# Plot on map
ggmap(map_z15) +
geom_spatvector(data=fence_buff, inherit.aes = FALSE, alpha = .4)+
scale_fill_viridis_d()+
geom_spatvector(data=out_sp, aes(colour = id), inherit.aes = FALSE)+
theme_void()
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(id = identity) %>%
filter(id %in% birds) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y")) %>%
select(c(id, start_date, end_date, to_360))
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate(days_out_to_dead = ifelse(alive == "Y", NA, end_date - first_out))
View(survival)
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate(days_out_to_dead = ifelse(to_360 == "TRUE", NA, end_date - first_out))
View(out_sum2)
map_z14 <- get_map(c(144.4380, -37.9000), zoom=14, maptype = "satellite")
# Plot on map
ggmap(map_z14) +
geom_spatvector(data=fence_buff, inherit.aes = FALSE, alpha = .4)+
scale_fill_viridis_d()+
geom_spatvector(data=out_sp, aes(colour = id), inherit.aes = FALSE)+
theme_void()
# Clover?
clover <- read.csv("Input/movebank/Clover.csv")
# Clover?
clover <- read.csv("Input/movebank/Clover.csv") %>%
clean_names()
names(clover)
ggmap(map_z14) +
geom_point(aes(location_lat, location_long))
ggmap(map_z14) +
geom_point(data = clover, aes(location_lat, location_long))
ggmap(map_z14) +
geom_point(data = clover, aes(location_long, location_lat))
View(clover)
# Summarise
out_sum <- out %>% group_by(id) %>%
summarise(np = length(id),
first_out = as_date(min(date)),
last_out = as_date(max(date)),
days = length(unique(date))) %>%
# Add row for Sage who died out but so few points it was filtered out
rbind(data.frame(
id = "Sage",
np = NA,
first_out = as_date("2023-06-27"),
last_out = as_date("2023-06-27"),
days = 1
)) %>%
# Add a row for Clover who died right near the front gate
rbind(data.frame(
id = "Clover",
np = NA,
first_out = as_date("2023-04-29"),
last_out = as_date("2023-04-29"),
days = 1
)) %>%
# Lastly, a row for Nutmeg who died at Ford, but no tracking data to there
rbind(data.frame(
id = "Nutmeg",
np = NA,
first_out = as_date("2024-01-07"),
last_out = as_date("2024-01-07"),
days = 1
))
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(id = identity) %>%
filter(id %in% birds) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y")) %>%
select(c(id, start_date, end_date, to_360))
# Join over fence and survival
out_sum2 <- left_join(out_sum, survival) %>%
mutate(days_to_out = first_out - start_date) %>%
mutate(days_out_to_dead = ifelse(to_360 == "TRUE", NA, end_date - first_out))
View(out_sum2)
# Plot on map
ggmap(map_z14) +
geom_spatvector(data=fence_buff, inherit.aes = FALSE, alpha = .4)+
scale_fill_viridis_d()+
geom_spatvector(data=out_sp, aes(colour = id), inherit.aes = FALSE)+
theme_void()
# Read in clean data
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(datetime)); beep()
# Specify the coords of each GPS fix
coords <- as.matrix(cbind(data$utm_easting, data$utm_northing))
# Set coords for the release location
release  <- matrix(c(274423.45, 5801912.85), ncol=2) #(-37.902374, 144.434323)
# Calculate distance between the release location and all fixes
dist <- mutate(data, dist_release = distance(coords, as.matrix(release),
lonlat=FALSE)); beep()
# Calculate daily summary statistics
dist_day <- dist %>% group_by(date, id) %>%
dplyr::summarise(mean = mean(dist_release),
max = max(dist_release),
min = min(dist_release)) %>%
mutate(date = as_date(date))
# Plot average distance from release site per day, smoothed & coloured by individual
ggplot(dist_day)+
geom_smooth(aes(date, mean, group = id, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Mean daily distance from release location (m)")+
scale_colour_viridis_d()
# Add release group information
group <- data.frame(
id = c("Aurora", "Robin", "Briar", "Nutmeg", "Star",
"Iona", "Sage", "Koda",
"Prem", "Rove", "Brook", "Clover", "Wobbles", "Valentine", "Marmalade"),
release = c(rep("October",5), rep("December",3), rep("January",7)))
# Add release group information
group <- data.frame(
id = c("Aurora", "Robin", "Briar", "Nutmeg",
"Iona", "Sage", "Koda",
"Prem", "Rove", "Brook", "Clover", "Wobbles", "Valentine", "Marmalade"),
release = c(rep("October",5), rep("December",3), rep("January",7)))
# Add release group information
group <- data.frame(
id = c("Aurora", "Robin", "Briar", "Nutmeg",
"Iona", "Sage", "Koda",
"Prem", "Rove", "Brook", "Clover", "Wobbles", "Valentine", "Marmalade"),
release = c(rep("October",4), rep("December",3), rep("January",7)))
dist_day <- left_join(dist_day, group)
# Plot average distance from release site per day, smoothed & coloured by release group
ggplot(dist_day)+
geom_smooth(aes(date, mean, group = id, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Mean daily distance from release location (m)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))
theme(axis.text.x = element_text(angle = 90)
# Plot average distance from release site per day, smoothed & coloured by release group
ggplot(dist_day)+
# Plot average distance from release site per day, smoothed & coloured by release group
ggplot(dist_day)+
geom_smooth(aes(date, mean, group = id, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Mean daily distance from release location (m)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))+
theme(axis.text.x = element_text(angle = 90))
# And summary stats for whole period
dist_summary <- dist_day %>%
group_by(id) %>%
summarise(mean_daily_dist = mean(mean))
# Save results
write.csv(dist_day, "Output/distance_release.csv", row.names = FALSE)
write.csv(dist_summary, "Output/distance_release_mean.csv", row.names = FALSE)
View(dist_summary)
mean(dist_summary$mean_daily_dist)
sd(dist_summary$mean_daily_dist)
# Convert to track (AMT format)
track <- make_track(data, .x = utm_easting,.y= utm_northing,
.t= DateTime, id = id) %>%
nest(data = -"id")
# Convert to track (AMT format)
track <- make_track(data, .x = utm_easting,.y= utm_northing,
.t= datetime, id = id) %>%
nest(data = -"id")
# Bird list excluding Daisy (returned to captivity) & Star (disease fate)
birds <- c("Briar", "Nutmeg", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover",
"Prem", "Rove", "Valentine", "Marmalade", "Wobbles")
# Loop through distance per day per bird 🐢
dates <- unique(data$date)
dist <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = dates[j])
print(out)
dist <- rbind.data.frame(dist, out)
}}; beep()
View(dist)
# Loop through distance per day per bird 🐢
dates <- unique(data$date)
dist <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = as_date(dates[j]))
print(out)
dist <- rbind.data.frame(dist, out)
}}; beep()
# Plot distance moved per day, smoothed and coloured by individual
ggplot(dist)+
geom_smooth(aes(date, dist, group = bird, color=bird))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
# Add release group information
group <- data.frame(
bird = c("Aurora", "Robin", "Briar", "Nutmeg", "Star",
"Iona", "Sage", "Koda",
"Prem", "Rove", "Brook", "Clover", "Wobbles", "Valentine", "Marmalade"),
release = c(rep("October",5), rep("December",3), rep("January",7)))
dist <- left_join(dist, group)
# Plot distance moved per day, smoothed & coloured by release group
ggplot(dist)+
geom_smooth(aes(date, dist, group = bird, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))
# Plot distance moved per day, smoothed & coloured by release group
ggplot(dist)+
geom_smooth(aes(date, dist, group = bird, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))+
theme(axis.text.x = element_text(angle = 90))
# and as an average over the study period
dist_summary <- dist %>%
group_by(bird) %>%
summarise(mean_daily_dist = mean(dist))
# save results
write.csv(dist, "Output/distance_daily.csv", row.names = FALSE)
write.csv(dist_summary, "Output/distance_daily_mean.csv", row.names = FALSE)
View(dist_summary)
mean(dist_summary$mean_daily_dist)
mean(dist_summary$mean_daily_dist)/1000
mean(dist_summary$mean_daily_dist)*1000
sd(dist_summary$mean_daily_dist)*1000
View(dist)
mean(dist$dist)
sd(dist$dist)
sd(dist$dist)*1000
View(dist_day)
mean(dist_day$mean)
sd(dist_day$mean)
# Save results
write.csv(dist_day, "Output/distance_release.csv", row.names = FALSE)
write.csv(dist_summary, "Output/distance_release_mean.csv", row.names = FALSE)
# and as an average over the study period
dist_summary <- dist %>%
group_by(bird) %>%
summarise(mean_daily_dist = mean(dist))
# save results
write.csv(dist, "Output/distance_daily.csv", row.names = FALSE)
write.csv(dist_summary, "Output/distance_daily_mean.csv", row.names = FALSE)
# And summary stats for whole period
dist_summary <- dist_day %>%
group_by(id) %>%
summarise(mean_daily_dist = mean(mean))
write.csv(dist_summary, "Output/distance_release_mean.csv", row.names = FALSE)
# Read in clean data
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(datetime)); beep()
# Convert GPS fixes to spatial points data frame
locs <- SpatialPointsDataFrame(coordinates(
cbind(data$utm_easting, data$utm_northing)),
data = dplyr::select(data, id))
# calculate home range
## 90% kud
hr_90 <-  kernelUD(locs, h="href", grid=200) %>%
getverticeshr(percent = 90); beep()
# transform to latlon
## 90% kud
proj4string(hr_90) <- CRS("EPSG:32755") #set crs
hr_90ll <- spTransform(hr_90, CRS("EPSG:4326")) %>% #transform to lat lon
st_as_sf()
## 50% kud
proj4string(hr_50) <- CRS("EPSG:32755") #set crs
## 50% kud
hr_50 <-  kernelUD(locs, h="href", grid=200) %>%
getverticeshr(percent = 50); beep()
# transform to latlon
## 90% kud
proj4string(hr_90) <- CRS("EPSG:32755") #set crs
hr_90ll <- spTransform(hr_90, CRS("EPSG:4326")) %>% #transform to lat lon
st_as_sf()
## 50% kud
proj4string(hr_50) <- CRS("EPSG:32755") #set crs
hr_50ll <- spTransform(hr_50, CRS("EPSG:4326")) %>% #transform to lat lon
st_as_sf()
# plot map
## 90% kud
ggmap(map_z15)+
geom_sf(data=hr_90ll, aes(fill=id), alpha = .7, inherit.aes = FALSE) +
scale_fill_viridis_d()
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# plot map
## 90% kud
ggmap(map_z15)+
geom_sf(data=hr_90ll, aes(fill=id), alpha = .7, inherit.aes = FALSE) +
scale_fill_viridis_d()
## 50% kud
ggmap(map_z15)+
geom_sf(data=hr_50ll, aes(fill=id), alpha = .7, inherit.aes = FALSE) +
scale_fill_viridis_d()
# plot map
## 90% kud
ggmap(map_z15)+
geom_sf(data=hr_90ll, aes(fill=id), alpha = .7, inherit.aes = FALSE) +
scale_fill_viridis_d()+
theme_void()
## 50% kud
ggmap(map_z15)+
geom_sf(data=hr_50ll, aes(fill=id), alpha = .7, inherit.aes = FALSE) +
scale_fill_viridis_d()+
theme_void()
# save results
hr <- data.frame(bird = hr_90@data$id,
kud90 = hr_90@data$area,
kud50 = hr_50@data$area)
View(hr)
mean(hr$kud90)
sd(hr$kud90)
mean(hr$kud50)
sd(hr$kud50)
# convert GPS fixes to spatial points data frame
locs <- SpatialPointsDataFrame(coordinates(
cbind(data$utm_easting, data$utm_northing)),
data = data)
# loop through birds and days for 90% KUD 🐢🐢
dates <- unique(locs$date)
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
points <- subset(locs, id == birds[i] & date == dates[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = dates[j]) %>%
st_drop_geometry()
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
# Bird list excluding Daisy (returned to captivity) & Star (disease fate)
birds <- c("Briar", "Nutmeg", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover",
"Prem", "Rove", "Valentine", "Marmalade", "Wobbles")
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
points <- subset(locs, id == birds[i] & date == dates[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = dates[j]) %>%
st_drop_geometry()
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
View(hr_daily)
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
points <- subset(locs, id == birds[i] & date == dates[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = as_date(dates[j])) %>%
st_drop_geometry()
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
# Save to file
write.csv(hr_daily, "Output/hr_daily_area.csv", row.names = FALSE)
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_smooth(aes(date, area, group = id, color=id), method = "lm")+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_smooth(aes(date, area, group = id, color=id), method = "lm")+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()+
theme(axis.text.x = element_text(angle = 90))
# And individual box plots
ggplot(hr_daily)+
geom_boxplot(aes(id, area, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
theme(axis.text.x = element_text(angle = 50))+
scale_color_viridis_d()+
theme(legend.position="none")
write.csv(hr, "Output/hr_area.csv", row.names = FALSE)
temp <- read.csv("Output/hr_daily_area.csv")
View(temp)
