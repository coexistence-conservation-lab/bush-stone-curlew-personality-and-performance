mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2) %>%
as_factor(error)
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = as_factor(screen0 + screen1 + screen2))
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_d()+
theme_void()
# Filter data based on accelerometer and speed mismatch
p_acc <- 0.05 # vedba parameter
p_sp <- 0.05 # speed parameter
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = as_factor(screen0 + screen1 + screen2))
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_d()+
theme_void()
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = DateTime), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = screen0), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = screen1), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = screen2), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot VeDBA and speed over time
ggplot(robin3)+
geom_path(aes(vedba, DateTime))+
theme_minimal()
# Plot VeDBA and speed over time
ggplot(robin3)+
geom_path(aes(DateTime, veDBA))+
theme_minimal()
# Plot VeDBA and speed over time
ggplot(robin3)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
# Plot VeDBA and speed over time
robin_day <- filter(robin3, date == "2023-03-02")
ggplot(robin3)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
ggplot(robin_day)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
head(robin3$DateTime)
# Plot VeDBA and speed over time (for a 10 minute window)
s600 <- as_datetime(c(as_datetime("2023-03-01 00:00:39"):as_date("2023-03-01 00:10:00"))))
# Plot VeDBA and speed over time (for a 10 minute window)
s600 <- as_datetime(c(as_datetime("2023-03-01 00:00:39"):as_date("2023-03-01 00:10:00")))
# Plot VeDBA and speed over time (for a 10 minute window)
robin_day <- slice(robin3, 1:10)
# Plot VeDBA and speed over time (for a 10 minute window)
robin4 <- slice(robin3, 1:10)
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
# Plot VeDBA and speed over time (for a 10 minute window)
robin4 <- slice(robin3, 1:100)
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
# Plot VeDBA and speed over time (for a 10 minute window)
robin4 <- slice(robin3, 1:50)
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_m/s))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*.1))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*2))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*3))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*2))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*2), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*5), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*10), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*15), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~.*10, name="Speed m/s"))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~.*20, name="Speed m/s"))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~./20, name="Speed m/s"))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=/20, name="Speed m/s"))+
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~/20, name="Speed m/s"))+
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~./20, name="Speed m/s"))+
theme_minimal()
# Filter data based on accelerometer and speed mismatch
p_acc <- 0.5 # vedba parameter
p_sp <- 0.05 # speed parameter
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = screen2), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*10), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~./10, name="Speed m/s"))+
theme_minimal()
# Filter data based on accelerometer and speed mismatch
p_acc <- 0.5 # vedba parameter
# Filter data based on accelerometer and speed mismatch
p_acc <- 0.4 # vedba parameter
p_sp <- 0.04 # speed parameter
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Load packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Load packages
pacman::p_load(adehabitatHR, amt, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Google API key for ggmaps
ggmap::register_google(key = "AIzaSyAH3qnqmxDATEluG8lKt2KtnHKLYJc2WaM")
# Read in unfiltered data with gundog outlier annotation
data <- read_csv("Processed/GPSdata_outliers.csv",
col_select = c("id", "DateTime","lon","lat","acceleration_raw_x",
"acceleration_raw_y", "acceleration_raw_z",
"external_temperature", "height_above_msl", "utm_easting",
"utm_northing", "utm_zone", "qi", "gps_hdop")) %>%
mutate(DateTime = as.POSIXct(DateTime,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# Test subset, 1 month for Robin
robin <- filter(data, id == "Robin" & gps_hdop <= 1.8
& date %in% as_date(c(as_date("2023-03-01"):as_date("2023-03-30"))))
?make_track
# Load packages
pacman::p_load(adehabitatHR, amt, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Read in unfiltered data with gundog outlier annotation
data <- read_csv("Processed/GPSdata_outliers.csv",
col_select = c("id", "DateTime","lon","lat","acceleration_raw_x",
"acceleration_raw_y", "acceleration_raw_z",
"external_temperature", "height_above_msl", "utm_easting",
"utm_northing", "utm_zone", "qi", "gps_hdop")) %>%
mutate(DateTime = as.POSIXct(DateTime,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# Test subset, 1 month for Robin
robin <- filter(data, id == "Robin" & gps_hdop <= 1.8
& date %in% as_date(c(as_date("2023-03-01"):as_date("2023-03-30"))))
# Make amt track object
robin_amt <- make_track(robin, .x = lon, .y = lat,
.t = DateTime, crs = "EPSG:4326",
all_cols = TRUE, verbose = TRUE)
plot(robin_amt)
# Check sampling rate
summarize_sampling_rate(robin_amt)
# Check sampling rate
summarize_sampling_rate(robin_amt, unit = "sec")
?summarize_sampling_rate
# Check sampling rate
summarize_sampling_rate(robin_amt, time_unit = "secong")
# Check sampling rate
summarize_sampling_rate(robin_amt, time_unit = "sec")
?track_resample
# Resample track
robin_resamp <- track_resample(rate = minutes(5), tolerance = minutes(0.5))
# Resample track
robin_resamp <- track_resample(robin_amt,
rate = minutes(5), tolerance = minutes(0.5))
# Resample track
robin_resamp <- track_resample(robin_amt,
rate = minutes(5), tolerance = minutes(1))
# Google API key for ggmaps
ggmap::register_google(key = "AIzaSyAH3qnqmxDATEluG8lKt2KtnHKLYJc2WaM")
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# Plot resampled versus original data
ggmap(map_z15)+
geom_path(data = robin_amt, aes(lat, lom))
# Plot resampled versus original data
ggmap(map_z15)+
geom_path(data = robin_amt, aes(lat, lon))
# Plot resampled versus original data
ggmap(map_z15)+
geom_path(data = robin_amt, aes(lat, lon))
# Plot resampled versus original data
ggmap(map_z15)+
geom_path(data = robin_amt, aes(lat, lon), inherit.aes = FALSE)
View(robin_amt)
# Plot resampled versus original data
ggmap(map_z15)+
geom_path(data = robin_amt, aes(x_, y_), inherit.aes = FALSE)
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE)
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "white")+
geom_path(data = robin_amt, aes(x_, y_), inherit.aes = FALSE)
View(robin_resamp)
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "white")+
geom_path(data = robin_resamp, aes(x_, y_, fill = t_), inherit.aes = FALSE)
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "white")+
geom_path(data = robin_resamp, aes(x_, y_, colour = t_), inherit.aes = FALSE)
# Resample track
robin_resamp <- track_resample(robin_amt,
rate = minutes(10), tolerance = minutes(1))
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "white")+
geom_path(data = robin_resamp, aes(x_, y_, colour = t_), inherit.aes = FALSE)+
```
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "white")+
geom_path(data = robin_resamp, aes(x_, y_, colour = t_), inherit.aes = FALSE)
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "white")+
geom_path(data = robin_resamp, aes(x_, y_, colour = t_), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# Plot resampled versus original data
ggplot()+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "white")+
geom_path(data = robin_resamp, aes(x_, y_, colour = t_), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# Plot resampled versus original data
ggplot()+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "black")+
geom_path(data = robin_resamp, aes(x_, y_, colour = t_), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
View(robin_resamp)
devtools::install_github("pratikunterwegs/atlastools")
# Median smoothing instead of time resampling
robin_smooth <- atl_median_smooth(data = robin_amt, x = x_, y = y_,
time = t_, moving_window = 20)
install.packages(atlastools)
install.packages('atlastools')
devtools::install_github("pratikunterwegs/atlastools")
library(atlastools)
# Median smoothing instead of time resampling
robin_smooth <- atl_median_smooth(data = robin_amt, x = x_, y = y_,
time = t_, moving_window = 20)
head(robin_amt)
# Median smoothing instead of time resampling
robin_smooth <- atl_median_smooth(data = robin_amt, x = robin_amt$x_, y = robin_amt$y_,
time = robin_amt$t_, moving_window = 20)
# Median smoothing instead of time resampling
robin_smooth <- atl_median_smooth(data = robin_amt, x = "x_", y = "y_",
time = "t_", moving_window = 20)
# Median smoothing instead of time resampling
robin_smooth <- atl_median_smooth(data = robin_amt, x = "x_", y = "y_",
time = "t_", moving_window = 21)
head(robin_smooth)
plot(robin_smooth)
# Plot resampled versus original data
ggplot()+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "black")+
geom_path(data = robin_smooth, aes(x_, y_, colour = t_), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# Plot resampled versus original data
ggplot()+
geom_point(data = robin_amt, aes(x_, y_), inherit.aes = FALSE, colour = "black")+
geom_path(data = robin_smooth, aes(x_, y_, colour = t_), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Read in unfiltered data with gundog outlier annotation
data <- read_csv("Processed/GPSdata_outliers.csv",
col_select = c("id", "DateTime","lon","lat","acceleration_raw_x",
"acceleration_raw_y", "acceleration_raw_z",
"external_temperature", "height_above_msl", "utm_easting",
"utm_northing", "utm_zone", "qi", "gps_hdop")) %>%
mutate(DateTime = as.POSIXct(DateTime,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# Test subset, 1 month for Robin
robin <- filter(data, id == "Robin" & gps_hdop <= 1.8
& date %in% as_date(c(as_date("2023-03-01"):as_date("2023-03-30"))))
# Median smoothing instead of time resampling
robin_smooth <- atl_median_smooth(data = robin, x = "lat", y = "lon",
time = "DateTime", moving_window = 21)
# Plot resampled versus original data
ggplot()+
geom_point(data = robin, aes(x_, y_), colour = "black")+
geom_path(data = robin_smooth, aes(x_, y_, colour = t_))+
scale_colour_viridis_c()+
theme_void()
# Plot resampled versus original data
ggplot(aes(lat, lon))+
geom_point(data = robin, colour = "black")+
geom_path(data = robin_smooth, colour = t_))+
# Plot resampled versus original data
ggplot(aes(lat, lon))+
geom_point(data = robin, colour = "black")+
geom_path(data = robin_smooth, colour = DateTime))+
# Plot resampled versus original data
ggplot(aes(lat, lon))+
geom_point(data = robin, colour = "black")+
geom_path(data = robin_smooth, colour = DateTime)+
scale_colour_viridis_c()+
theme_void()
# Plot resampled versus original data
ggplot()+
geom_point(data = robin, aes(lat, lon), colour = "black")+
geom_path(data = robin_smooth, aes(lat, lon), colour = DateTime)+
scale_colour_viridis_c()+
theme_void()
head(robin_smootjh)
head(robin_smooth)
# Plot resampled versus original data
ggplot()+
geom_point(data = robin, aes(lat, lon), colour = "black")+
geom_path(data = robin_smooth, aes(lat, lon, colour = DateTime))+
scale_colour_viridis_c()+
theme_void()
# Google API key for ggmaps
ggmap::register_google(key = "AIzaSyAH3qnqmxDATEluG8lKt2KtnHKLYJc2WaM")
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin, aes(lat, lon), colour = "black", inherit.aes = FALSE)+
geom_path(data = robin_smooth, aes(lat, lon, colour = DateTime), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin, aes(lon, lat), colour = "black", inherit.aes = FALSE)+
geom_path(data = robin_smooth, aes(lon, lat, colour = DateTime), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# Median smoothing instead of time resampling
robin_smooth <- atl_median_smooth(data = robin, x = "lat", y = "lon",
time = "DateTime", moving_window = 3)
# Plot resampled versus original data
ggmap(map_z15)+
geom_point(data = robin, aes(lon, lat), colour = "black", inherit.aes = FALSE)+
geom_path(data = robin_smooth, aes(lon, lat, colour = DateTime), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# Plot smoothed track over original points
ggmap(map_z15)+
geom_point(data = robin, aes(lon, lat), colour = "white", inherit.aes = FALSE)+
geom_path(data = robin_smooth, aes(lon, lat, colour = DateTime), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# Plot smoothed track over original points
ggmap(map_z15)+
geom_path(data = robin, aes(lon, lat), colour = "white", inherit.aes = FALSE)+
geom_path(data = robin_smooth, aes(lon, lat, colour = DateTime), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# Plot smoothed track over original points
ggplot()+
geom_point(data = robin, aes(lon, lat))+
geom_path(data = robin_smooth, aes(lon, lat, colour = DateTime))+
scale_colour_viridis_c()+
theme_void()
# Test subset, 1 month for Robin
robin <- filter(data, id == "Robin" & gps_hdop <= 1.8
& date %in% as_date(c(as_date("2023-03-01"):as_date("2023-03-30"))))
# Median smoothing instead of time resampling
robin_smooth <- atl_median_smooth(data = robin, x = "lat", y = "lon",
time = "DateTime", moving_window = 3)
# Plot smoothed track over original points
ggplot()+
geom_point(data = robin, aes(lon, lat))+
geom_path(data = robin_smooth, aes(lon, lat, colour = DateTime))+
scale_colour_viridis_c()+
theme_void()
# And against satellite map
ggmap(map_z15)+
geom_point(data = robin, aes(lon, lat), colour = "white", inherit.aes = FALSE)+
geom_path(data = robin_smooth, aes(lon, lat, colour = DateTime), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
