family = binomial())
anova(m1a, test = "Chi")
# m1b: What predicts survival to 1 year?
m1b <- glm(to_360 ~ sqrt(latency) + alert + as.factor(score) + as.factor(sex) + weight,
data = data,
family = binomial())
anova(m1b, test = "Chi")
# m1a: What predicts survival to 90 days?
m1a <- glm(to_90 ~ sqrt(latency) + alert + as.factor(score) + as.factor(sex) + weight + tarsus + wing,
data = data,
family = binomial())
anova(m1a, test = "Chi")
View(data)
View(data)
names(data)
# Combine survival with all predictors
data <- left_join(survival, mlatency) %>%
left_join(handling) %>%
left_join(prop_behav) %>%
left_join(traits) %>%
# Drop un-needed behaviour columns
dplyr::select(-c(A, C, E, F, HB, HT, N, O, P, S, TW, W, D, I))
View(data)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Load packages
pacman::p_load(beepr, ggpubr, janitor, performance, readxl, sjPlot, survival, tidyverse)
# Bird list excluding Daisy (returned to captivity) & Star (disease fate)
birds <- c("Briar", "Nutmeg", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover",
"Prem", "Rove", "Valentine", "Marmalade", "Wobbles")
# Chunk 2: latency data
# Read in and clean up latency assay data
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
# Select study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-12", "2022-10-11")) %>%
dplyr::select(c("date", "bird", "reach", "latency_s")) %>%
# Convert yes/no to 1/0
mutate(reach = ifelse(reach == "Yes", 1, 0)) %>%
rename(latency = latency_s) %>%
# Add column for plotting 'did not reach'
mutate(label = ifelse(is.na(latency), "DNR", ""))
# Plot latency by bird
ggplot(latency) +
geom_bar(aes(bird, latency, fill = as.character(date)),
position = "dodge", stat = "identity")+
geom_text(aes(y=600, x= bird, label = label), angle = 90, vjust = -0.5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()+
theme(panel.grid.minor = element_blank())
# Chunk 3: mean latency
# Calculate mean latency by bird
mlatency <- latency %>%
na.omit() %>%
group_by(bird) %>%
summarise(latency = mean(latency))
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency), position = "dodge", stat = "identity")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()+
theme(panel.grid.minor = element_blank())
# Check the distribution of mean latency
hist(mlatency$latency)
shapiro.test(mlatency$latency)
qqnorm(mlatency$latency)
# Transform mean latency
hist(sqrt(mlatency$latency))
shapiro.test(sqrt(mlatency$latency))
qqnorm(sqrt(mlatency$latency))
# Chunk 4: handling
# Read in handling data
handling <- read_excel("Input/bsc assay data.xlsx", sheet = 7) %>%
clean_names() %>%
rename(bird = identity) %>%
# Filter to study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-20")) %>%
# Drop unneeded columns
dplyr::select(c(bird, score))
# Plot frequency of handling scores
ggplot(handling)+
geom_bar(aes(score))+
scale_y_continuous(breaks =c(1,3,5,7,9))+
theme_minimal()+
theme(panel.grid.minor = element_blank())
# Chunk 5: behaviours
# Ethogram
eth <- matrix(c("A", "Alert",
"C", "Calling",
"D", "Defensive wing display",
"E", "Eating/drinking",
"F", "Fluff",
"HB", "Head bob",
"HT", "Head tilt",
"I", "Sitting",
"N", "Camouflaged walk",
"O", "Courtship",
"P", "Preening",
"S", "Standing",
"W", "Walking",
"TW", "Tail wag",
"Z", "Out of frame"),
ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
rename(code = V1,
Behaviour = V2)
# Assign plotting order of behaviours
order <- c("Alert", "Head bob", "Head tilt", "Tail wag", "Camouflaged walk",
"Defensive wing display", "Calling", "Eating/drinking", "Courtship",
"Fluff", "Preening", "Sitting", "Standing", "Walking", "Out of frame")
# Read in and tidy up video assays
behaviour <- read_excel("Input/bsc assay data.xlsx", sheet =4) %>%
clean_names() %>%
# Drop metadata columns
dplyr::select(-c("clip", "note")) %>%
# Convert from wide to long
pivot_longer(3:61, names_to = "second", values_to = "code") %>%
# Convert seconds into numeric
mutate(second = as.numeric(str_remove(second, "x"))) %>%
# Drop instances of out of frame
filter(!code == "Z") %>%
# Lump all variations of head tilt
mutate(code = ifelse(code %in% c("HBT", "HTB", "HTW"), "HT", code)) %>%
# Add behaviour descriptions from ethogram
left_join(eth) %>%
# Turn behaviour into a factor to assign order for plotting
mutate(Behaviour = factor(Behaviour, levels = order)) %>%
# Assign vigilance to 1 and not to 0
mutate(vigilant = ifelse(code %in%
c("A", "D", "HB", "HT", "TW", "N"), 1, 0)) %>%
# Drop lines without recordings (primarily for Prem and Rove who had 10 second clips)
na.omit()
# Plot proportion of time spent in each behaviour per bird
ggplot(behaviour) +
geom_bar(aes(x= bird, fill = Behaviour), position = "fill")+
labs(x= element_blank(),
y = "Proportion of time spent in each behaviour")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
theme_minimal()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank())+
scale_fill_viridis_d(direction = -1)
# Calculate proportion of time spent in each behaviour and a summed 'alert' metric
time <- count(behaviour, bird) %>%
rename(total = n)
prop_behav <- count(behaviour, bird, code) %>%
left_join(time) %>%
# Divide count of behaviour by total time for %
mutate(prop = n/total) %>%
dplyr::select(-c(n, total)) %>%
# Pivot wider, one column per behaviour
pivot_wider(names_from = code, values_from = prop) %>%
# Replace NAs for behaviour with zeroes
replace(is.na(.), 0) %>%
# Add column for summed 'alert' measure
mutate(alert = A + HB + HT + TW + N + D)
# Plot time spent alert
ggplot(prop_behav) +
geom_bar(aes(x= bird, y= alert), position = "dodge", stat = "identity")+
labs(x= element_blank(),
y = "Proportion of time spent in alert behaviours")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
theme_minimal()+
theme(panel.grid.minor = element_blank())
# Check distribution of behaviours
hist(prop_behav$alert)
# Summarise allocation of behaviours
prop_behav_sum <- prop_behav %>%
summarise(across(where(is.numeric),list(mean = mean, sd = sd))) %>%
pivot_longer(1:30)
# Chunk 6: traits
# Read in additional bird metadata
meta <- read_excel("Input/bsc assay data.xlsx", sheet = 8) %>%
clean_names() %>%
rename(bird = individual) %>%
select(c(bird, sex, age))
# And pre-release weights
weights <- read_excel("Input/bsc assay data.xlsx", sheet = 9) %>%
clean_names() %>%
select(c(identity, weight, condition)) %>%
rename(bird = identity)
# And morphometrics
traits <- read_excel("Input/bsc assay data.xlsx", sheet = 10) %>%
clean_names()  %>%
select(c(identity, wing, tail, tarsus)) %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
# Combine all traits data
left_join(meta) %>%
left_join(weights)
# Chunk 7: traits 2
# Weight and condition by sex
ggplot(traits, aes(x= condition, y= weight, fill = sex))+
geom_boxplot()+
geom_jitter()+
theme_minimal()
# Weight and tarsus by sex
ggplot(traits, aes(x= tarsus, y= weight, fill = sex))+
geom_point()+
geom_smooth(method = "lm")+
theme_minimal()
# Wind chord and tarsus by sex
ggplot(traits, aes(x= wing, y= tarsus, fill = sex))+
geom_point()+
geom_smooth(method = "lm")+
theme_minimal()
# Chunk 8: survival
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
# Limit persistence value to minimum common tracked time of 360
mutate(persist = ifelse(persist>360, 360, persist)) %>%
# Convert true and false to 0 and 1
mutate(to_90 = ifelse(to_90 == FALSE, 0, 1),
to_360 = ifelse(to_360 == FALSE, 0, 1)) %>%
# Drop unneeded columns
dplyr::select(c(bird, persist, to_90, to_360))
# Check the distribution of persistence and test some transformations
hist(survival$persist)
hist(sqrt(survival$persist))
hist(log(survival$persist))
# Combine survival with all predictors
data <- left_join(survival, mlatency) %>%
left_join(handling) %>%
left_join(prop_behav) %>%
left_join(traits) %>%
# Drop un-needed behaviour columns
dplyr::select(-c(A, C, E, F, HB, HT, N, O, P, S, TW, W, D, I))
# Chunk 9: m1a
# m1a: What predicts survival to 90 days?
m1a <- glm(to_90 ~ sqrt(latency) + alert + as.factor(score) + as.factor(sex) + weight,
data = data,
family = binomial())
anova(m1a, test = "Chi")
check_model(m1a)
# Chunk 10: m1b
# m1b: What predicts survival to 1 year?
m1b <- glm(to_360 ~ sqrt(latency) + alert + as.factor(score) + as.factor(sex) + weight,
data = data,
family = binomial())
anova(m1b, test = "Chi")
check_model(m1b)
# Chunk 11: m2a
# m2a: Does latency to reach food predict survival? To 90 days.
## Violin plot
ggplot(data, aes(x= to_90, y=sqrt(latency), group=to_90))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 90-days post-release",
y = "Latency to reach food (squareroot transformed)")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m2a <- glm(to_90 ~ sqrt(latency),
data = data,
family = binomial())
summary(m2a)
# Survival probability
exp(coef(m1a))
# Chunk 12: m2b
# m2b: Does latency to reach food predict survival? To 360 days.
## Violin plot
ggplot(data, aes(x= to_360, y=sqrt(latency), group=to_360))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 1-year post-release",
y = "Latency to reach food (squareroot transformed)")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m2b <- glm(to_360 ~ sqrt(latency),
data = data,
family = binomial())
summary(m2b)
# Chunk 13: m3a
mosaicplot(table(data$to_90, data$score),
main = NULL,
xlab = "Survival to 90-days post-release",
ylab = "Handling score")
chisq.test(table(data$to_90, data$score))
# Chunk 14: m3b
mosaicplot(table(data$to_360, data$score),
main = NULL,
xlab = "Survival to 1-year post-release",
ylab = "Handling score")
chisq.test(table(data$to_360, data$score))
# Chunk 15: m4
# m4a: Does weight predict survival? To 90 days.
## Violin plot
ggplot(data, aes(x= to_90, y=weight, group=to_90))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 90-days post-release",
y = "Pre-release weight")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m4a <- glm(to_90 ~ weight,
data = data,
family = binomial())
summary(m4a)
# m4b: Does weight predict survival? To 1 year.
## Violin plot
ggplot(data, aes(x= to_360, y=weight, group=to_360))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 1-year post-release",
y = "Pre-release weight")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m4b <- glm(to_360 ~ weight,
data = data,
family = binomial())
summary(m4b)
# Chunk 16: m5
# m5a: Does weight predict survival? To 90 days.
## Mosaic plot
mosaicplot(table(data$to_90, data$sex),
main = NULL,
xlab = "Survival to 90-days post-release",
ylab = "Sex")
chisq.test(table(data$to_90, data$sex))
# m5b: Does weight predict survival? To 1 year.
## Mosaic plot
mosaicplot(table(data$to_360, data$sex),
main = NULL,
xlab = "Survival to 1-year post-release",
ylab = "Sex")
chisq.test(table(data$to_360, data$sex))
# Add every day for survival
surv <- data.frame()
for(i in 1:length(birds2)){
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y"))
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds2[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
surv <- rbind(surv, temp2)
}
for(i in 1:length(birds)){
temp <- subset(survival, bird == birds[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y"))
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
surv <- rbind(surv, temp2)
}
View(survival)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
# Limit persistence value to minimum common tracked time of 360
mutate(persist = ifelse(persist>360, 360, persist)) %>%
# Convert true and false to 0 and 1
mutate(to_90 = ifelse(to_90 == FALSE, 0, 1),
to_360 = ifelse(to_360 == FALSE, 0, 1))
View(survival)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
# Limit persistence value to minimum common tracked time of 360
mutate(persist = ifelse(persist>360, 360, persist)) %>%
# Convert true and false to 0 and 1
mutate(to_90 = ifelse(to_90 == FALSE, 0, 1),
to_360 = ifelse(to_360 == FALSE, 0, 1)) %>%
# Drop unneeded columns
dplyr::select(c(bird, persist, to_90, to_360, start_date, end_date))
# Combine survival with all predictors
data <- left_join(survival, mlatency) %>%
left_join(handling) %>%
left_join(prop_behav) %>%
left_join(traits) %>%
# Drop un-needed behaviour columns
dplyr::select(-c(A, C, E, F, HB, HT, N, O, P, S, TW, W, D, I))
# Add every day for survival
surv <- data.frame()
for(i in 1:length(birds)){
temp <- subset(survival, bird == birds[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y"))
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
surv <- rbind(surv, temp2)
}
View(surv)
survival3 <- left_join(survival2, latency2) %>%
left_join(select(handling, c(bird, score))) %>%
mutate(score = as_factor(score))
View(data)
hazard <- left_join(surv, data)
View(hazard)
names(hazard)
hazard <- left_join(surv, data) %>%
dplyr::select(-c(persist, to_90, to_360, start_date, end_date))
View(hazard)
# Plot hazard rate
plot(survfit(Surv(time, status) ~ 1, data = hazard))
summary(survfit(Surv(time, status) ~ 1, data = hazard))
test <- coxph(Surv(time, status) ~ scale(latency) + score, data = hazard)
summary(test)
plot_model()
plot_model(test, type = "pred")
km <- with(data, Surv(persist, to_360))
surv <- with(data, Surv(persist, to_360))
surv
head(surv, 80)
head(veteran)
nrow(veteran)
View(data)
# Bring in data and format as Surv() for Kaplan Meier Analysis
data2 <- date %>%
rename(time = persist,
status = to_360)
# Bring in data and format as Surv() for Kaplan Meier Analysis
data2 <- data %>%
rename(time = persist,
status = to_360)
View(data2)
# Bring in data and format as Surv() for Kaplan Meier Analysis
data2 <- data %>%
rename(time = persist,
status = to_360) %>%
select(-c(to_90, start_date, end_date))
km <- with(data2, Surv(time, status))
km
km <- with(data, Surv(persist, to_360))
km_fit <- survfit(Surv(persist, to_360) ~ 1, data)
summary(km_fit, times = c(1,30,60,90*(1:10)))
autoplot(km_fit)
plot(km_fit)
plot(km_fit, xlab="Days", main = 'Kaplan Meyer Plot')
print(km)
summary(km_fit, times = c(1,90, 180, 270, 359))
# Bring in data and format as Surv() for Kaplan Meier Analysis
km <- data %>%
rename(time = persist,
status = to_360)
km_fit <- survfit(Surv(persist, to_360) ~ 1, km)
summary(km_fit, times = c(1,90, 180, 270, 359))
plot(km_fit, xlab="Days", main = 'Kaplan Meyer Plot')
eclipse <- read_xlsx("Input/temp.xlsx")
eclipse <- read_xlsx("Input/temp.xlsx")
warnings()
eclipse <- read_xlsx("Input/temp.xlsx") %>%
clean_names()
eclipse <- read_xlsx("Input/temp.xlsx") %>%
clean_names() %>%
filter(identity == "Eclipse")
View(eclipse)
eclipse <- read_xlsx("Input/temp.xlsx") %>%
clean_names()
temp <- read_xlsx("Input/temp.xlsx") %>%
clean_names()
temp <- read_xlsx("Input/temp.xlsx") %>%
clean_names() %>%
filter(location == MRA)
View(data)
View(data2)
View(temp)
temp <- read_xlsx("Input/temp.xlsx") %>%
clean_names() %>%
filter(location == "MRA")
ggplot(temp) +
geom_smooth(method = "lm", aes(x = weight, y = date))
ggplot(temp) +
geom_smooth(method = "lm", aes(y = weight, yx= date))
ggplot(temp) +
geom_smooth(method = "lm", aes(y = weight, x= date))
ggplot(temp) +
geom_smooth(method = "lm", aes(y = weight, x= date, fill = identity))
ggplot(temp) +
geom_point(aes(y = weight, x= date, fill = identity))
ggplot(temp, aes(y = weight, x= date, colour = identity)) +
geom_point()+
geom_line()
temp <- read_xlsx("Input/temp.xlsx") %>%
clean_names()
ggplot(temp, aes(y = weight, x= date, colour = identity)) +
geom_point()+
geom_line()
