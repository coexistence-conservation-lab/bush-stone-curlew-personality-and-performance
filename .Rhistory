# Read in packages
pacman::p_load(beepr, ggmap, glmmTMB, janitor, SDLfilter, solitude, suncalc, tidyverse)
# Google API key for ggmaps
ggmap::register_google(key = "AIzaSyAH3qnqmxDATEluG8lKt2KtnHKLYJc2WaM")
# read in temp data- do this later with all birds
data_raw <- read.csv("temp_raw.csv")
data_filt <- read.csv("temp_filt.csv")
# Calculate DBA for each time step
data_dba <- temp %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z))
# Calculate DBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z))
hist(data_dba$dba)
# Calculate DBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
move = ifelse(dba > 1600, "move", "stationary"))
names(data_dba)
ggplot(data_dba) +
geom_point(aes(dba, ground_speed))
# Calculate DBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(square(acceleration_raw_x)+square(acceleration_raw_y)+square(acceleration_raw_z)),
move = ifelse(dba > 1600, "move", "stationary"))
# Calculate DBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
move = ifelse(dba > 1600, "move", "stationary"))
hist(data_dba$vedba)
ggplot(data_dba) +
geom_point(aes(vedba, ground_speed))
ggplot(data_dba) +
geom_point(aes(vedba, sSpeed))
ggplot(data_dba) +
geom_point(aes(vedba, pSpeed))
ggplot(data_dba) +
geom_point(aes(vedba, ground_speed))
ggplot(data_dba) +
geom_boxplot(aes(vedba, fill = move))
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
move = ifelse(ground_speed <1, "move", "stationary"))
ggplot(data_dba) +
geom_boxplot(aes(vedba, fill = move))
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
move = ifelse(ground_speed <.1, "move", "stationary"))
ggplot(data_dba) +
geom_boxplot(aes(vedba, fill = move))
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
move = ifelse(pSpeed <1, "move", "stationary"))
ggplot(data_dba) +
geom_boxplot(aes(vedba, fill = move))
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
move = ifelse(dba > 1600, "move", "stationary"))
ggplot(data_dba) +
geom_boxplot(aes(ground_speed, fill = move))
ggplot(data_dba) +
geom_boxplot(aes(pSPeed, fill = move))
ggplot(data_dba) +
geom_boxplot(aes(pSpeed, fill = move))
ggplot(data_dba) +
geom_boxplot(aes(sSpeed, fill = move))
ggplot(data_dba) +
geom_point(aes(vedba, ground_speed))
quartile(data_dba$vedba)
summary(data_dba$vedba)
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
speed = mean(pSpeed, sSpeed))
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
speed = average(pSpeed, sSpeed))
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
speed = mean(pSpeed, sSpeed))
names(data_dba)
str(data_dba$sSpeed)
str(data_dba$pSpeed)
>mean
?mean
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
mSpeed = mean(c(pSpeed, sSpeed)))
hist(data_dba$mSpeed)
summary(data_dba$mSpeed)
View(data_dba)
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
mSpeed = (sSpeed + pSpeed)/2)
View(data_dba)
View(data_dba)
head(data_dba)
hist(data_dba$mSpeed)
summary(data_dba$mSpeed)
screen1 = ifelse(vedba < 247 & mSpeed > 0.977, "1", "0")
# Calculate DBA and VEDBA for each time step
data_dba <- data_filt %>%
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
mSpeed = ((sSpeed + pSpeed)/2),
screen1 = ifelse(vedba < 247 & mSpeed > 0.977, "1", "0"))
View(data_dba)
head(data_dba)
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=data_dba, aes(lon, lat), color="blue")+
geom_path(data=data_raw, aes(lon, lat), color="blue")
# plot data cleaning to check visually
map <- get_map(c(144.435738, -37.9000), zoom=15, maptype = "satellite")
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=data_dba, aes(lon, lat), color="blue")+
geom_path(data=data_raw, aes(lon, lat), color="blue")
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=filter(data_dba, screen1 == 0), aes(lon, lat), color="yellow")+
geom_point(data=data=filter(data_dba, screen1 == 1), aes(lon, lat), color="blue")+
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=filter(data_dba, screen1 = 0), aes(lon, lat), color="yellow")+
geom_point(data=data=filter(data_dba, screen1 = 1), aes(lon, lat), color="blue")+
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=filter(data_dba, screen1 = 0), aes(lon, lat), color="yellow")+
geom_point(data=filter(data_dba, screen1 = 1), aes(lon, lat), color="blue")+
geom_path(data=data_raw, aes(lon, lat), color="blue")
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=filter(data_dba, screen1 == 0), aes(lon, lat), color="yellow")+
geom_point(data=filter(data_dba, screen1 == 1), aes(lon, lat), color="blue")+
geom_path(data=data_raw, aes(lon, lat), color="blue")
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=filter(data_dba, screen1 == 1), aes(lon, lat), color="yellow")+
geom_point(data=filter(data_dba, screen1 == 0), aes(lon, lat), color="blue")+
geom_path(data=data_raw, aes(lon, lat), color="blue")
# Calculate errors based on mismatch of dba and speed
data_dba <- data_filt %>%
# calculate dba as the sum of absolute value of axial acceleration
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
# calculate vedba as the sqaure root of the sum of the squared axial values
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
# calculate the mean speed between the forward and back step speed calculations
mSpeed = ((sSpeed + pSpeed)/2),
# allocate type I errors: VeDBA < 1st quartile & GPS speed > 3rd quartile (likely resultant from locational error)
screen1 = ifelse(vedba < 246.7 & mSpeed > 0.977, "1", "0"),
# allocate type II errors: VeDBA > 3rd quartile & GPS speed < 1st quartile (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > 621.5 & mSpeed < 0.286, "1", "0"))
# Calculate errors based on mismatch of dba and speed
data_dba <- data_filt %>%
# calculate dba as the sum of absolute value of axial acceleration
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
# calculate vedba as the sqaure root of the sum of the squared axial values
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
# calculate the mean speed between the forward and back step speed calculations
mSpeed = ((sSpeed + pSpeed)/2),
# allocate type I errors: VeDBA < 1st quartile & GPS speed > 3rd quartile (likely resultant from locational error)
screen1 = ifelse(vedba < 246.7 & mSpeed > 0.977, "1", "0"),
# allocate type II errors: VeDBA > 3rd quartile & GPS speed < 1st quartile (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > 621.5 & mSpeed < 0.286, "1", "0"),
error = screen1 + screen2)
str(screen1)
str(data_dbascreen1)
str(data_dba$screen1)
# Calculate errors based on mismatch of dba and speed
data_dba <- data_filt %>%
# calculate dba as the sum of absolute value of axial acceleration
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
# calculate vedba as the sqaure root of the sum of the squared axial values
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
# calculate the mean speed between the forward and back step speed calculations
mSpeed = ((sSpeed + pSpeed)/2),
# allocate type I errors: VeDBA < 1st quartile & GPS speed > 3rd quartile (likely resultant from locational error)
screen1 = ifelse(vedba < 246.7 & mSpeed > 0.977, 1, 0),
# allocate type II errors: VeDBA > 3rd quartile & GPS speed < 1st quartile (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > 621.5 & mSpeed < 0.286, 1, 0),
error = screen1 + screen2)
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=filter(data_dba, error == 2), aes(lon, lat), color="orange")+
geom_point(data=filter(data_dba, error == 1), aes(lon, lat), color="yellow")+
geom_point(data=filter(data_dba, error == 0), aes(lon, lat), color="blue")+
geom_path(data=data_raw, aes(lon, lat), color="blue")
ggmap(map)+
# Un-filtered data
# SDL
geom_point(data=filter(data_dba, error == 0), aes(lon, lat), color="blue")+
geom_point(data=filter(data_dba, error == 1), aes(lon, lat), color="yellow")+
geom_point(data=filter(data_dba, error == 2), aes(lon, lat), color="orange")+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_path(data=data_raw, aes(lon, lat), color="blue")
ggmap(map)+
# un-filtered data
geom_point(data=data_raw, aes(lon, lat), color="red")+
# path
geom_path(data=data_raw, aes(lon, lat), color="black")+
# filtered no errors
geom_point(data=filter(data_dba, error == 0), aes(lon, lat), color="blue")+
# filtered 1 error type
geom_point(data=filter(data_dba, error == 1), aes(lon, lat), color="yellow")+
# filtered 2 error types
geom_point(data=filter(data_dba, error == 2), aes(lon, lat), color="orange")
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(screen1))
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(screen1, mSpeed))
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(screen1, mSpeed, fill = screen1))
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(mSpeed, group = screen1, fill = screen1))
geom_boxplot(aes(mSpeed, group = as.factor(screen1))
# plot type I and type II errors
ggplot(data_dba)+
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(mSpeed, group = as.factor(screen1)))
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(mSpeed, group = as.factor(screen1), fill = screen1))
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(mSpeed, group = as.factor(screen1), fill = as.factor(screen1)))
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(ground_speed, group = as.factor(screen1), fill = as.factor(screen1)))
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(ground_speed, group = as.factor(screen2), fill = as.factor(screen2)))
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(ground_speed, group = as.factor(error), fill = as.factor(error)))
unique(data_dba$error)
View(data_dba)
# plot dba and vedba
ggplot(data_dba)+
geom_point(aes(dba, vedba))
# plot dba and vedba
ggplot(data_dba)+
geom_point(aes(dba, vedba))+
geom_smooth(aes(dba, vedba), method = "lm")
# plot dba and vedba
ggplot(data_dba)+
geom_point(aes(dba, vedba))+
geom_smooth(aes(dba, vedba))
# plot type I and type II errors
ggplot(data_dba)+
geom_boxplot(aes(ground_speed, group = as.factor(error), fill = as.factor(error)))
summary(data_dba$vedba)
hist(data_dba$vedba)
# Calculate errors based on mismatch of dba and speed
data_dba <- data_filt %>%
# calculate dba as the sum of absolute value of axial acceleration
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
# flag fixes with zero acceleration, unlikely
screen0 = ifelse(vedba == 0, 1, 0),
# calculate vedba as the sqaure root of the sum of the squared axial values
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
# calculate the mean speed between the forward and back step speed calculations
mSpeed = ((sSpeed + pSpeed)/2),
# allocate type I errors: VeDBA < 1st quartile & GPS speed > 3rd quartile (likely resultant from locational error)
screen1 = ifelse(vedba < 246.7 & mSpeed > 0.977, 1, 0),
# allocate type II errors: VeDBA > 3rd quartile & GPS speed < 1st quartile (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > 621.5 & mSpeed < 0.286, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
# Calculate errors based on mismatch of dba and speed
data_dba <- data_filt %>%
# calculate dba as the sum of absolute value of axial acceleration
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
# flag fixes with zero acceleration, unlikely
screen0 = ifelse(dba == 0, 1, 0),
# calculate vedba as the sqaure root of the sum of the squared axial values
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
# calculate the mean speed between the forward and back step speed calculations
mSpeed = ((sSpeed + pSpeed)/2),
# allocate type I errors: VeDBA < 1st quartile & GPS speed > 3rd quartile (likely resultant from locational error)
screen1 = ifelse(vedba < 246.7 & mSpeed > 0.977, 1, 0),
# allocate type II errors: VeDBA > 3rd quartile & GPS speed < 1st quartile (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > 621.5 & mSpeed < 0.286, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
# plot errors by ground_speed (calculated onboard)
ggplot(data_dba)+
geom_boxplot(aes(ground_speed, group = as.factor(error), fill = as.factor(error)))
# Calculate errors based on mismatch of dba and speed
data_dba <- data_filt %>%
# calculate dba as the sum of absolute value of axial acceleration
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
# flag fixes with zero acceleration, unlikely
screen0 = ifelse(dba == 0, 1, 0),
# calculate vedba as the sqaure root of the sum of the squared axial values
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
# calculate the mean speed between the forward and back step speed calculations
mSpeed = ((sSpeed + pSpeed)/2),
# allocate type I errors: VeDBA < 1st quartile & GPS speed > 3rd quartile (likely resultant from locational error)
screen1 = ifelse(vedba < 246.7 & mSpeed > 0.977, 1, 0),
# allocate type II errors: VeDBA > 3rd quartile & GPS speed < 1st quartile (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > 621.5 & mSpeed < 0.286, 1, 0),
# combine errors
error = screen0 + screen1 + screen2) %>%
# remove the value with ground speed >20km/h, biologically unrealistic
filter(ground_speed<20)
# plot errors by ground_speed (calculated onboard)
ggplot(data_dba)+
geom_boxplot(aes(ground_speed, group = as.factor(error), fill = as.factor(error)))
# Calculate errors based on mismatch of dba and speed
data_dba <- data_filt %>%
# calculate dba as the sum of absolute value of axial acceleration
mutate(dba = abs(acceleration_raw_x) + abs(acceleration_raw_y) + abs(acceleration_raw_z),
# flag fixes with zero acceleration, unlikely
screen0 = ifelse(dba == 0, 1, 0),
# calculate vedba as the sqaure root of the sum of the squared axial values
vedba = sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2),
# calculate the mean speed between the forward and back step speed calculations
mSpeed = ((sSpeed + pSpeed)/2),
# allocate type I errors: VeDBA < 1st quartile & GPS speed > 3rd quartile (likely resultant from locational error)
screen1 = ifelse(vedba < 246.7 & mSpeed > 0.977, 1, 0),
# allocate type II errors: VeDBA > 3rd quartile & GPS speed < 1st quartile (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > 621.5 & mSpeed < 0.286, 1, 0),
# combine errors
error = screen0 + screen1 + screen2) %>%
# remove the value with ground speed >20km/h, biologically unrealistic
filter(ground_speed<20) %>%
# remove NA error values
filter(!is.na(error))
# plot errors by ground_speed (calculated onboard)
ggplot(data_dba)+
geom_boxplot(aes(ground_speed, group = as.factor(error), fill = as.factor(error)))
ggmap(map)+
# un-filtered data
geom_point(data=data_raw, aes(lon, lat), color="red")+
# path
geom_path(data=data_raw, aes(lon, lat), color="black")+
# filtered no errors
geom_point(data=filter(data_dba, error == 0), aes(lon, lat), color="blue")+
# filtered 1 error type
geom_point(data=filter(data_dba, error == 1), aes(lon, lat), color="yellow")+
# filtered 2 error types
geom_point(data=filter(data_dba, error == 2), aes(lon, lat), color="orange")
# List of birds in this translocation
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
# Import data from movebank and filter to study birds
data_raw <- read.csv("Input/movebank_20221019_20230417.csv") %>%
clean_names() %>%
filter(individual_local_identifier %in% birds) %>%
# Time in posix format
mutate(DateTime = as.POSIXct(study_local_timestamp,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"),
# Rename columns for SDLfilter
id = individual_local_identifier,
lat = location_lat,
lon = location_long,
qi = gps_satellite_count); beep('coin')
# List of birds in this translocation
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
# Import data from movebank and filter to study birds
data_raw <- read.csv("Input/movebank_20221019_20230417.csv") %>%
clean_names() %>%
filter(individual_local_identifier %in% birds) %>%
# Time in posix format
mutate(DateTime = as.POSIXct(study_local_timestamp,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"),
# Rename columns for SDLfilter
id = individual_local_identifier,
lat = location_lat,
lon = location_long,
qi = gps_satellite_count); beep('coin')
# Run SDLfilter for each bird with the speed thresholds calculated per bird
data_filt <- data.frame()
for(i in 1:length(birds)){
subset <- filter(data_raw, id == birds[i])
vmax <- vmax(subset, prob = 0.99)
vmaxlp <- vmaxlp(subset, prob = 0.99)
temp <- ddfilter(subset,
vmax = vmax,
vmaxlp = vmaxlp,
qi = 5,
method = 2)
data_filt <- rbind(data_filt, temp)
}; beep('coin')
# Save to file
write.csv(data_filt, "Processed/gpsdata_filtered.csv", row.names = FALSE)
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=data_filt, aes(lon, lat), color="blue")+
geom_path(data=data_filt, aes(lon, lat), color="blue")
# plot data cleaning to check visually
map <- get_map(c(144.4400, -37.9000), zoom=15, maptype = "satellite")
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=data_filt, aes(lon, lat), color="blue")+
geom_path(data=data_filt, aes(lon, lat), color="blue")
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=data_filt, aes(lon, lat), color="blue")+
geom_path(data=data_filt, aes(lon, lat), color="blue")
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=data_filt, aes(lon, lat), color="blue")+
geom_path(data=data_filt, aes(lon, lat), color="blue")+
facet_wrap(~id)
ggmap(map)+
geom_point(data=data_raw, aes(lon, lat), color="red")+
geom_point(data=data_filt, aes(lon, lat), color="blue")+
geom_path(data=data_filt, aes(lon, lat), color="blue")+
facet_wrap(~id)
