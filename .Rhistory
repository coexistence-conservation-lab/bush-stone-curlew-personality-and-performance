checkTO(test1, test2)
# Test subset 2 birds
test1 <- subset(data, id=="Aurora")
test2 <- subset(data, id=="Robin")
checkTO(test1, test2)
# Read in clean data in move2 format for wildlifeDI
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(study_local_timestamp,
format = "%Y-%m-%d %H:%M:%S")) %>%
select(c(datetime, utm_easting, utm_northing, id)) %>%
na.omit() %>%
mt_as_move2(time_column = "datetime",
track_id_column = "id",
coords =  c("utm_easting", "utm_northing")) %>%
sf::st_set_crs("EPSG:32755"); beep()
# Issue with Nutmeg?
nutmeg <- subset(data, id=="Nutmeg")
str(nutmeg)
max(nutmeg$datetime)
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, pscl, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
m1ai <- glmmTMB(to_90 ~ scale(latency),
data = m1_data,
family = binomial)
# Read in and clean up latency assay data
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
# Select study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-12", "2022-10-11")) %>%
select(c("date", "bird", "reach", "latency_s")) %>%
# Convert yes/no to 1/0
mutate(reach = ifelse(reach == "Yes", 1, 0)) %>%
rename(latency = latency_s) %>%
# Add column for plotting 'did not reach'
mutate(label = ifelse(is.na(latency), "DNR", "")) %>%
# Convert latency NAs to zeros
mutate(latency = ifelse(is.na(latency), 0, latency))
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
# Limit persistence value to minimum common tracked time of 360
mutate(persist = ifelse(persist>360, 360, persist))
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "to_90", "to_360")) %>%
left_join(latency)
# Bird list excluding Daisy (returned to captivity) & Star (disease fate)
birds <- c("Briar", "Nutmeg", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover",
"Prem", "Rove", "Valentine", "Marmalade", "Wobbles")
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
# Limit persistence value to minimum common tracked time of 360
mutate(persist = ifelse(persist>360, 360, persist))
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "to_90", "to_360")) %>%
left_join(latency)
# Read in and clean up latency assay data
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
# Select study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-12", "2022-10-11")) %>%
select(c("date", "bird", "reach", "latency_s")) %>%
# Convert yes/no to 1/0
mutate(reach = ifelse(reach == "Yes", 1, 0)) %>%
rename(latency = latency_s) %>%
# Add column for plotting 'did not reach'
mutate(label = ifelse(is.na(latency), "DNR", "")) %>%
# Convert latency NAs to zeros
mutate(latency = ifelse(is.na(latency), 0, latency))
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "to_90", "to_360")) %>%
left_join(latency)
# Drop DNRs
m1_data <- filter(m1_data, !label == "DNR")
m1ai <- glmmTMB(to_90 ~ scale(latency),
data = m1_data,
family = binomial)
summary(m1ai)
m1ai <- glmmTMB(to_90 ~ scale(log(latency)),
data = m1_data,
family = binomial)
summary(m1ai)
check_model(m1ai)
qqggplot(m1ai)
library(ggpubr)
qqggplot(m1ai)
m1ai <- glmmTMB(to_90 ~ scale((latency)),
data = m1_data,
family = binomial)
summary(m1ai)
check_model(m1ai)
m1aii <- glmmTMB(to_360 ~ scale(log(latency)),
data = m1_data,
family = binomial)
summary(m1aii)
check_model(m1aii)
m1b <- glmmTMB(persist ~ scale(log(latency)),
data = m1_data,
family = nbinom2(link = "log"))
summary(m1b)
m1b <- glmmTMB(persist ~ scale((latency)),
data = m1_data,
family = nbinom2(link = "log"))
summary(m1b)
check_model(m1b)
hist(m1_data$persist)
m1b <- glmmTMB(persist ~ scale((latency)),
data = m1_data)
summary(m1b)
check_model(m1b)
m1b <- glmmTMB(persist ~ scale(log(latency)),
data = m1_data)
summary(m1b)
check_model(m1b)
m1b <- glmmTMB(persist ~ scale(log(latency)) + bird,
data = m1_data)
summary(m1b)
check_model(m1b)
m1b <- glmmTMB(persist ~ scale(log(latency)) + (1|bird),
data = m1_data)
summary(m1b)
check_model(m1b)
hist(m1_data$persist)
hist(log(m1_data$persist))
# Add every day for survival
birds2 <- setdiff(birds, c("Daisy", "Star"))
survival2 <- data.frame()
for(i in 1:length(birds2)){
temp <- subset(survival, bird == birds2[i])
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds2[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
survival2 <- rbind(survival2, temp2)
}
temp <- subset(survival, bird == birds2[i])
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds2[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
survival2 <- rbind(survival2, temp2)
View(survival)
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date))
?as_date
head(survival)
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"))
View(temp)
# Add every day for survival
birds2 <- setdiff(birds, c("Daisy", "Star"))
survival2 <- data.frame()
for(i in 1:length(birds2)){
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"))
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds2[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
survival2 <- rbind(survival2, temp2)
}
# Plot hazard rate
plot(survfit(Surv(time, status) ~ 1, data = survival2))
View(survival2)
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y"))
# Add every day for survival
birds2 <- setdiff(birds, c("Daisy", "Star"))
survival2 <- data.frame()
for(i in 1:length(birds2)){
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y"))
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds2[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
survival2 <- rbind(survival2, temp2)
}
# Plot hazard rate
plot(survfit(Surv(time, status) ~ 1, data = survival2))
summary(survfit(Surv(time, status) ~ 1, data = survival2))
coxph(survfit(Surv(time, status) ~ 1, data = survival2))
coxph((Surv(time, status) ~ 1, data = survival2))
?coxph
coxph(Surv(time, status) ~ 1, data = survival2)
test <- coxph(Surv(time, status) ~ 1, data = survival2)
summary(test)
View(test)
plot(test)
plot(survfit(test))
View(survival2)
View(survival)
View(survival2)
survival3 <- left_join(survival2, latency)
survival3 <- left_join(survival2, latency, by = "bird")
survival3 <- survival2 %>%
select(!date) %>%
left_join(latency, by = "bird")
survival3 <- latency %>%
select(!date)
survival3 <- latency %>%
select(!date) %>%
left_join(survival2, by = "bird")
survival3 <- latency %>%
select(!date) %>%
right_join(survival2, by = "bird")
View(survival3)
# Playing with alt latency scores
latency2 <- latency %>% group_by(bird) %>%
summarise(latency = mean(latency))
View(latency2)
survival3 <- left_join(survival2, latency)
survival3 <- left_join(survival2, latency2)
View(survival3)
test <- coxph(Surv(time, status) ~ latency, data = survival2)
test <- coxph(Surv(time, status) ~ latency, data = survival3)
summary(test)
plot(survfit(test))
test <- coxph(Surv(time, status) ~ scale(latency), data = survival3)
summary(test)
plot(survfit(test))
# Read in handling data
handling <- read_excel("Input/bsc assay data.xlsx", sheet = 7) %>%
clean_names() %>%
rename(bird = identity) %>%
# Filter to study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-20"))
View(handling)
names(handling)
survival3 <- left_join(survival2, latency2) %>%
left_join(select(handling, c(bird, score)))
View(survival3)
survival3 <- left_join(survival2, latency2) %>%
left_join(select(handling, c(bird, score))) %>%
mutate(score = as_factor(score))
test <- coxph(Surv(time, status) ~ scale(latency) + score, data = survival3)
summary(test)
plot(survfit(test))
plot((test))
librar(sjplot)
library(sjplot)
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, pscl, SDLfilter, segclust2d, sf, sjPlot, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
beep()
beep('coin')
beep()
print("hello"); beep()
plot_model(test)
plot_model(test, type = "pred")
# Load packages
pacman::p_load(beepr, ggpubr, glmmTMB, janitor, performance, sjPlot, survival, readxl)
# Bird list excluding Daisy (returned to captivity) & Star (disease fate)
birds <- c("Briar", "Nutmeg", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover",
"Prem", "Rove", "Valentine", "Marmalade", "Wobbles")
# Read in and clean up latency assay data
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
# Select study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-12", "2022-10-11")) %>%
select(c("date", "bird", "reach", "latency_s")) %>%
# Convert yes/no to 1/0
mutate(reach = ifelse(reach == "Yes", 1, 0)) %>%
rename(latency = latency_s) %>%
# Add column for plotting 'did not reach'
mutate(label = ifelse(is.na(latency), "DNR", "")) %>%
# Convert latency NAs to zeros
mutate(latency = ifelse(is.na(latency), 0, latency))
# Load packages
pacman::p_load(beepr, ggpubr, glmmTMB, janitor, performance, readxl, sjPlot, survival, tidyverse)
# Read in and clean up latency assay data
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
# Select study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-12", "2022-10-11")) %>%
select(c("date", "bird", "reach", "latency_s")) %>%
# Convert yes/no to 1/0
mutate(reach = ifelse(reach == "Yes", 1, 0)) %>%
rename(latency = latency_s) %>%
# Add column for plotting 'did not reach'
mutate(label = ifelse(is.na(latency), "DNR", "")) %>%
# Convert latency NAs to zeros
mutate(latency = ifelse(is.na(latency), 0, latency))
View(latency)
# Plot latency by bird
ggplot(latency) +
geom_bar(aes(bird, latency, fill = as.character(date)), position = "dodge", stat = "identity")+
geom_text(aes(y=600, x= bird, label = label), angle = 90, vjust = -0.5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
# Read in handling data
handling <- read_excel("Input/bsc assay data.xlsx", sheet = 7) %>%
clean_names() %>%
rename(bird = identity) %>%
# Filter to study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-20"))
# Plot
ggplot(handling)+
geom_bar(aes(score))+
theme_minimal()
View(handling)
9/14
3/14
2/14
# Read in and tidy up video assays
video <- read_excel("Input/bsc assay data.xlsx", sheet =4) %>%
clean_names() %>%
# Drop metadata columns
select(-c("clip", "note")) %>%
# Convert from wide to long
pivot_longer(3:61, names_to = "second", values_to = "behaviour") %>%
# Convert seconds into numeric
mutate(second = as.numeric(str_remove(second, "x"))) %>%
# Assign vigilance to 1 and not to 0
mutate(vigilant = ifelse(behaviour %in%
c("A","HT","HB","HBT","N","TW","D"), 1, 0)) %>%
# Drop lines without recordings (primarily for Prem and Rove who had 10 second clips)
na.omit()
# Calculate time spent vigilant
vigilance <- video %>%
group_by(bird) %>%
summarise(z = sum(grepl("Z", behaviour)),
L = length(behaviour) - z,
v = sum(vigilant),
pv = v/L)
# Plot proportion of time spent vigilant by bird
ggplot(vigilance) +
geom_bar(aes(bird, pv), position = "dodge", stat = "identity")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Proportion of time spent vigilant")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
theme_minimal()
# Plot mean latency by bird
ggplot(latency) +
geom_bar(aes(bird, latency, fill = as.character(date)), position = "dodge", stat = "identity")+
geom_text(aes(y=600, x= bird, label = label), angle = 90, vjust = -0.5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
scale_y_continuous(breaks=breaks_pretty())+
theme_minimal()
# Plot mean latency by bird
ggplot(latency) +
geom_bar(aes(bird, latency, fill = as.character(date)), position = "dodge", stat = "identity")+
geom_text(aes(y=600, x= bird, label = label), angle = 90, vjust = -0.5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
scale_y_continuous(breaks =c(0,2,4,6,8,10))+
theme_minimal()
# Plot mean latency by bird
ggplot(latency) +
geom_bar(aes(bird, latency, fill = as.character(date)), position = "dodge", stat = "identity")+
geom_text(aes(y=600, x= bird, label = label), angle = 90, vjust = -0.5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
# Plot
ggplot(handling)+
geom_bar(aes(score))+
scale_y_continuous(breaks =c(0,2,4,6,8))+
theme_minimal()
# Plot
ggplot(handling)+
geom_bar(aes(score))+
scale_y_continuous(breaks =c(1,3,5,7,9))+
theme_minimal()
# Plot latency by bird
ggplot(latency) +
geom_bar(aes(bird, latency, fill = as.character(date)), position = "dodge", stat = "identity")+
geom_text(aes(y=600, x= bird, label = label), angle = 90, vjust = -0.5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
# Calculate mean latency by bird
latency <- latency %>% group_by(bird) %>%
summarise(latency = mean(latency))
View(latency)
# Plot mean latency by bird
ggplot(latency) +
geom_bar(aes(bird, latency, fill = as.character(date)),
position = "dodge", stat = "identity")+
geom_text(aes(y=600, x= bird, label = label), angle = 90, vjust = -0.5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
# Read in and clean up latency assay data
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
# Select study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-12", "2022-10-11")) %>%
select(c("date", "bird", "reach", "latency_s")) %>%
# Convert yes/no to 1/0
mutate(reach = ifelse(reach == "Yes", 1, 0)) %>%
rename(latency = latency_s) %>%
# Add column for plotting 'did not reach'
mutate(label = ifelse(is.na(latency), "DNR", "")) %>%
# Convert latency NAs to zeros
mutate(latency = ifelse(is.na(latency), 0, latency))
# Calculate mean latency by bird
mlatency <- latency %>% group_by(bird) %>%
summarise(latency = mean(latency))
View(mlatency)
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency, fill = as.character(date)),
position = "dodge", stat = "identity")+
geom_text(aes(y=600, x= bird, label = label), angle = 90, vjust = -0.5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency, fill = as.character(date)),
position = "dodge", stat = "identity")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
geom_bar(aes(bird, latency, position = "dodge", stat = "identity")+
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency, position = "dodge", stat = "identity"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
)))))
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency, position = "dodge", stat = "identity"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency) position = "dodge", stat = "identity")+
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency), position = "dodge", stat = "identity")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency), position = "dodge", stat = "identity")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_bw()
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency), position = "dodge", stat = "identity")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_classic()
# Plot mean latency by bird
ggplot(mlatency) +
geom_bar(aes(bird, latency), position = "dodge", stat = "identity")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Mean latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
