robin <- filter(data, id == "Robin"
& date %in% as_date(c(as_date("2023-03-01"):as_date("2023-03-30")))) %>%
prepData(type = "UTM", coordNames = c("utm_easting", "utm_northing"))
# Plotting with moveHMM to see step lengths and jitter
plot(robin)
# Remove obvious outlier on step length histogram of step >300m
robin <- robin %>%  filter(step < 300)
# Remove obvious outlier on step length histogram of step >300m
robin <- robin %>%  filter(step < 300)
plot(robin)
View(robin)
# Load packages
pacman::p_load(adehabitatHR, amt, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Read in unfiltered data with gundog outlier annotation
data <- read_csv("Processed/GPSdata_outliers.csv",
col_select = c("id", "DateTime","lon","lat","acceleration_raw_x",
"acceleration_raw_y", "acceleration_raw_z",
"external_temperature", "height_above_msl", "utm_easting",
"utm_northing", "utm_zone", "qi", "gps_hdop")) %>%
mutate(DateTime = as.POSIXct(DateTime,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# Calculate speed for each displacement
robin2 <- cbind(speed_filt, data.frame(
speed_kmh = calc_speed(speed_filt,
coord.names = c("lon", "lat"),
timecol = "DateTime",
smoothed = TRUE,
units = "hour"))) %>%
mutate(speed_ms = speed_kmh/3.6); beep()
# Calculate speed for each displacement
robin2 <- cbind(robin, data.frame(
speed_kmh = calc_speed(robin,
coord.names = c("lon", "lat"),
timecol = "DateTime",
smoothed = TRUE,
units = "hour"))) %>%
mutate(speed_ms = speed_kmh/3.6); beep()
# Test subset, 1 month for Nutmeg
robin <- filter(data, id == "Robin"
& date %in% as_date(c(as_date("2023-03-01"):as_date("2023-03-30"))))
# Calculate speed for each displacement
robin2 <- cbind(robin, data.frame(
speed_kmh = calc_speed(robin,
coord.names = c("lon", "lat"),
timecol = "DateTime",
smoothed = TRUE,
units = "hour"))) %>%
mutate(speed_ms = speed_kmh/3.6); beep()
# Google API key for ggmaps
ggmap::register_google(key = "AIzaSyAH3qnqmxDATEluG8lKt2KtnHKLYJc2WaM")
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat), inherit.aes = FALSE, colour = speed_ms)+
theme_void()
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, latm, colour = speed_ms), inherit.aes = FALSE)+
theme_void()
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat, colour = speed_ms), inherit.aes = FALSE)+
theme_void()
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat, colour = speed_ms), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
head(robin2)
hist(robins$speed_ms)
hist(robin2$speed_ms)
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat, colour = speed_kmh), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
?calc_speed
# Calculate speed for each displacement
robin2 <- cbind(robin, data.frame(
speed_kmh = calc_speed(robin,
coord.names = c("utm_easting", "utm_northing"),
timecol = "DateTime",
smoothed = FALSE,
units = "hour"))) %>%
mutate(speed_ms = speed_kmh/3.6)
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat, colour = speed_kmh), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
hist(robin2$speed_ms)
# Calculate speed for each displacement
robin2 <- cbind(robin, data.frame(
speed_kmh = calc_speed(robin,
coord.names = c("lon", "lat"),
timecol = "DateTime",
smoothed = FALSE,
units = "hour"))) %>%
mutate(speed_ms = speed_kmh/3.6)
hist(robin2$speed_ms)
View(robin2)
hist(robin2$gps_hdop)
# Test subset, 1 month for Nutmeg
robin <- filter(data, id == "Robin" & gps_hdop =< 1.8
# Test subset, 1 month for Nutmeg
robin <- filter(data, id == "Robin" & gps_hdop <= 1.8
& date %in% as_date(c(as_date("2023-03-01"):as_date("2023-03-30"))))
# Calculate speed for each displacement
robin2 <- cbind(robin, data.frame(
speed_kmh = calc_speed(robin,
coord.names = c("lon", "lat"),
timecol = "DateTime",
smoothed = FALSE,
units = "hour"))) %>%
mutate(speed_ms = speed_kmh/3.6)
hist(robin2$speed_ms)
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat, colour = speed_kmh), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Calculate speed for each displacement
robin2 <- cbind(robin, data.frame(
speed_kmh = calc_speed(robin,
coord.names = c("utm_easting", "utm_northing"),
timecol = "DateTime",
smoothed = FALSE,
units = "seconds"))) %>%
mutate(speed_ms = speed_kmh/3.6)
# Calculate speed for each displacement
robin2 <- cbind(robin, data.frame(
speed_kmh = calc_speed(robin,
coord.names = c("utm_easting", "utm_northing"),
timecol = "DateTime",
smoothed = FALSE,
units = "secs"))) %>%
mutate(speed_ms = speed_kmh/3.6)
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat, colour = speed_kmh), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Histogram of speeds
hist(robin2$speed_kmh)
View(robin)
# Calculate speed for each displacement
robin2 <- cbind(robin, data.frame(
speed_kmh = calc_speed(robin,
coord.names = c("utm_easting", "utm_northing"),
timecol = "DateTime",
smoothed = FALSE,
units = "mins"))) %>%
mutate(speed_ms = speed_kmh/3.6)
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat, colour = speed_kmh), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Calculate speed for each displacement
robin2 <- cbind(robin, data.frame(
speed_kmh = calc_speed(robin,
coord.names = c("utm_easting", "utm_northing"),
timecol = "DateTime",
smoothed = FALSE,
units = "secs"))) %>%
mutate(speed_ms = speed_kmh/3.6)
# Plot on map with speed as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat, colour = speed_kmh), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Histogram of acceleration
hist(robin2$vedba)
# Calculate DBA and veDBA for each fix - /1000 to convert from 0.01g to g
robin3 <- robin2 %>% # speed-filtered data
# calculate dba as the sum of absolute value of axial acceleration
mutate(dba = ((abs(acceleration_raw_x) + abs(acceleration_raw_y) +
abs(acceleration_raw_z))/1000),
# calculate vedba as the square root of the sum of the squared axial values
vedba = ((sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 +
acceleration_raw_x^2))/1000))
# Histogram of acceleration
hist(robin3$vedba)
# Plot on map with acceleration as colour
ggmap(map_z15) +
geom_path(data = robin2, aes(lon, lat, colour = vedba), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with acceleration as colour
ggmap(map_z15) +
geom_path(data = robin3, aes(lon, lat, colour = vedba), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Histogram of speeds
hist(robin2$speed_kmh)
# Relationship between veDBA and speed
ggplot(robin3)+
geom_point(aes(vedba, speed_ms))+
theme_minimal()
# Relationship between veDBA and speed
ggplot(robin3, aes(vedba, speed_ms))+
geom_point()+
geom_smooth(method = "lm")
# Relationship between veDBA and speed
ggplot(robin3, aes(vedba, speed_ms))+
geom_point()+
geom_smooth(method = "lm")+
theme_minimal()
# Relationship between veDBA and speed
ggplot(robin3, aes(vedba, speed_ms))+
geom_point()+
theme_minimal()
# Filter data based on accelerometer and speed mismatch
p_acc <- 0.11 # vedba parameter
p_sp <- 0.35 # speed parameter
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
View(robin_mvf)
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
p_sp <- 0.05 # speed parameter
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2) %>%
as_factor(error)
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = as_factor(screen0 + screen1 + screen2))
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_d()+
theme_void()
# Filter data based on accelerometer and speed mismatch
p_acc <- 0.05 # vedba parameter
p_sp <- 0.05 # speed parameter
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = as_factor(screen0 + screen1 + screen2))
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_d()+
theme_void()
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = DateTime), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = screen0), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = screen1), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = screen2), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot VeDBA and speed over time
ggplot(robin3)+
geom_path(aes(vedba, DateTime))+
theme_minimal()
# Plot VeDBA and speed over time
ggplot(robin3)+
geom_path(aes(DateTime, veDBA))+
theme_minimal()
# Plot VeDBA and speed over time
ggplot(robin3)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
# Plot VeDBA and speed over time
robin_day <- filter(robin3, date == "2023-03-02")
ggplot(robin3)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
ggplot(robin_day)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
head(robin3$DateTime)
# Plot VeDBA and speed over time (for a 10 minute window)
s600 <- as_datetime(c(as_datetime("2023-03-01 00:00:39"):as_date("2023-03-01 00:10:00"))))
# Plot VeDBA and speed over time (for a 10 minute window)
s600 <- as_datetime(c(as_datetime("2023-03-01 00:00:39"):as_date("2023-03-01 00:10:00")))
# Plot VeDBA and speed over time (for a 10 minute window)
robin_day <- slice(robin3, 1:10)
# Plot VeDBA and speed over time (for a 10 minute window)
robin4 <- slice(robin3, 1:10)
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
# Plot VeDBA and speed over time (for a 10 minute window)
robin4 <- slice(robin3, 1:100)
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
# Plot VeDBA and speed over time (for a 10 minute window)
robin4 <- slice(robin3, 1:50)
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_m/s))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*.1))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*2))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*3))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*2))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*2), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*5), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*10), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*15), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)")+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~.*10, name="Speed m/s"))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~.*20, name="Speed m/s"))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~./20, name="Speed m/s"))+
theme_minimal()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=/20, name="Speed m/s"))+
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~/20, name="Speed m/s"))+
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*20), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~./20, name="Speed m/s"))+
theme_minimal()
# Filter data based on accelerometer and speed mismatch
p_acc <- 0.5 # vedba parameter
p_sp <- 0.05 # speed parameter
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = screen2), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
ggplot(robin4)+
geom_path(aes(DateTime, vedba))+
geom_path(aes(DateTime, speed_ms*10), colour = "red3")+
scale_y_continuous(name = "Accelerometer: veDBA (g)",
sec.axis = sec_axis(trans=~./10, name="Speed m/s"))+
theme_minimal()
# Filter data based on accelerometer and speed mismatch
p_acc <- 0.5 # vedba parameter
# Filter data based on accelerometer and speed mismatch
p_acc <- 0.4 # vedba parameter
p_sp <- 0.04 # speed parameter
robin_mvf <- robin3 %>%
# flag fixes with zero acceleration, unlikely
mutate(screen0 = ifelse(dba == 0, 1, 0),
# allocate type I errors: VeDBA < lower CI & speed > upper CI (likely resultant from location error)
screen1 = ifelse(vedba < p_acc & speed_ms > p_sp, 1, 0),
# allocate type II errors: VeDBA > upper CI & speed < lower (likely resultant from a stationary behaviour),
screen2 = ifelse(vedba > p_acc & speed_ms < p_sp, 1, 0),
# combine errors
error = screen0 + screen1 + screen2)
# Plot on map with MVF error as colour
ggmap(map_z15) +
geom_path(data = robin_mvf, aes(lon, lat, colour = error), inherit.aes = FALSE)+
scale_color_viridis_c()+
theme_void()
# Load packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Load packages
pacman::p_load(adehabitatHR, amt, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Google API key for ggmaps
ggmap::register_google(key = "AIzaSyAH3qnqmxDATEluG8lKt2KtnHKLYJc2WaM")
# Read in unfiltered data with gundog outlier annotation
data <- read_csv("Processed/GPSdata_outliers.csv",
col_select = c("id", "DateTime","lon","lat","acceleration_raw_x",
"acceleration_raw_y", "acceleration_raw_z",
"external_temperature", "height_above_msl", "utm_easting",
"utm_northing", "utm_zone", "qi", "gps_hdop")) %>%
mutate(DateTime = as.POSIXct(DateTime,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne"))
# Test subset, 1 month for Robin
robin <- filter(data, id == "Robin" & gps_hdop <= 1.8
& date %in% as_date(c(as_date("2023-03-01"):as_date("2023-03-30"))))
?make_track
