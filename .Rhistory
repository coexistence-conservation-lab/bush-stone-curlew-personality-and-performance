# m5a: Does sex predict survival? To 90 days.
## Mosaic plot
mosaicplot(table(data$to_90, data$sex),
main = NULL,
xlab = "Survival to 90-days post-release",
ylab = "Sex")
chisq.test(table(data$to_90, data$sex))
## Logistic regression with binomial family
m5a <- glm(to_90 ~ sex,
data = data,
family = binomial())
summary(m5a)
# m5b: Does sex predict survival? To 1 year.
## Mosaic plot
mosaicplot(table(data$to_363, data$sex),
main = NULL,
xlab = "Survival to 1-year post-release",
ylab = "Sex")
chisq.test(table(data$to_363, data$sex))
## Logistic regression with binomial family
m5b <- glm(to_363 ~ sex,
data = data,
family = binomial())
summary(m5b)
m9c <- coxph(Surv(time, status) ~ weight * sex, km, x= TRUE)
# Plot the survival area
plot_surv_area(model = m9c, data = km,
time = "time", status = "status", variable = "weight", group = "sex")
# Test effect of weight - log rank test
summary(m9c)
summary(m1a)
# m1a: Does proportion of time spent alert predict survival to 90 days?
## Violin plot
ggplot(data, aes(x= to_90, y = alert, group=to_90))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 90-days post-release",
y = "Proportion of time spent alert")+
theme_minimal()+
ggplot2::theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m1a <- glm(to_90 ~ scale(alert),
data = data,
family = binomial())
summary(m1a)
summary(m1a)
# m1a: Does proportion of time spent alert predict survival to 90 days?
## Violin plot
ggplot(data, aes(x= to_90, y = alert, group=to_90))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 90-days post-release",
y = "Proportion of time spent alert")+
theme_minimal()+
ggplot2::theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m1a <- glm(to_90 ~ scale(alert),
data = data,
family = binomial())
summary(m1a)
# m1b: Does proportion of time spent alert predict survival to 1 year?
## Violin plot
ggplot(data, aes(x= to_363, y = alert, group=to_363))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 1 year post-release",
y = "Proportion of time spent alert")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m1b <- glm(to_363 ~ scale(alert),
data = data,
family = binomial())
summary(m1b)
summary(m2a)
# m2a: Does latency to reach food predict survival to 90 days?
## Violin plot
ggplot(data, aes(x= to_90, y =sqrt(latency), group=to_90))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 90-days post-release",
y = "Latency to reach food (squareroot transformed)")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m2a <- glm(to_90 ~ scale(sqrt(latency)),
data = data,
family = binomial())
summary(m2a)
## Logistic regression with binomial family
m2b <- glm(to_363 ~ scale(sqrt(latency)),
data = data,
family = binomial())
summary(m2b)
## Chisq test
m3a <- chisq.test(table(data$to_90, data$score))
m3a
## Logistic regression with binomial family
m4a <- glm(to_90 ~ scale(weight),
data = data,
family = binomial())
summary(m4a)
## Logistic regression with binomial family
m4b <- glm(to_363 ~ scale(weight),
data = data,
family = binomial())
summary(m4b)
## Logistic regression with binomial family
m5a <- glm(to_90 ~ sex,
data = data,
family = binomial())
summary(m5a)
chisq.test(table(data$to_90, data$sex))
chisq.test(table(data$to_90, data$sex))
## Logistic regression with binomial family
m5b <- glm(to_363 ~ sex,
data = data,
family = binomial())
summary(m5b)
# Fit a survival model with latency as the continuous variable
m7 <- coxph(Surv(time, status) ~ sqrt(latency), km, x= TRUE)
# Plot the survival area
plot_surv_area(model = m7, data = km,
time = "time", status = "status", variable = "latency", group = NULL)
# Test effect of latency - log rank test
summary(m7)
# Fit a survival model with alert behaviour as the continuous variable
m8 <- coxph(Surv(time, status) ~ alert, km, x= TRUE)
# Plot the survival area
plot_surv_area(model = m8, data = km,
time = "time", status = "status", variable = "alert", group = NULL)
# Test effect of alert behaviour - log rank test
summary(m8)
# Test effect of weight - log rank test
summary(m9c)
summary(m9a)
summary(m9a)
summary(m9b)
# read in data
data <- read_csv("data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!bird %in% c("Daisy", "Star")) %>%
# rename period labels to look nicer on graphs
rename("90 days" = to_90,
"1 year" = to_360) %>%
# pivot wider on period
pivot_longer(3:4, names_to = "period", values_to = "survived") %>%
rename(Survival = survived) %>%
# categorical variables as factors
mutate(period = as_factor(period),
score = as_factor(score),
Survival = factor(Survival, levels = c("1", "0")))
# and separately format data for survival analysis
data2 <- data <- read_csv("data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!bird %in% c("Daisy", "Star")) %>%
mutate(time = persist,
status = ifelse(to_360 == 0, 1, 0),
sex = factor(sex),
score = factor(score)) %>%
select(-c(persist, to_90, to_360))
s1 <- survminer::ggsurvplot(survfit(Surv(time, status) ~ sex, data2),
conf.int = TRUE,
legend.title = "Sex",
legend = "right",
palette = c("#298c8c", "#f1a226"),
legend.labs = c("Female", "Male"),
xlab = "Days post release",
font.x =  12,
font.y = 12,
font.tickslab = 10,
ggtheme = theme_bw(),
xlim = c(0, 365),
break.time.by = 100,
censor = FALSE)
s2 <-  contsurvplot::plot_surv_area(model = coxph(Surv(time, status) ~ weight, data2, x= TRUE),
status = "status",
variable = "weight",
time = "time",
data = data2,
group = NULL,
legend.title = "Pre release\nweight (g)",
start_color="gray",
end_color="black",
alpha = 0.8,
xlab = "Days post release",
font.x =  12,
font.y = 12,
font.tickslab = 10,
ggtheme = theme_bw(),
xlim = c(0, 365),
break.time.by = 100,
censor = FALSE)
s3 <- contsurvplot::plot_surv_area(model = coxph(Surv(time, status) ~ sex * weight, data2, x= TRUE),
data = data2,
time = "time",
status = "status",
variable = "weight",
group = "sex",
start_color="gray",
end_color="black",
legend.title = "Pre release\nweight (g)",
xlab = "Days post release",
font.x =  12,
font.y = 12,
font.tickslab = 10,
ggtheme = theme_bw(),
xlim = c(0, 365),
break.time.by = 100,
censor = FALSE)
s4 <-  contsurvplot::plot_surv_area(model = coxph(Surv(time, status) ~ latency, data2, x = TRUE),
status = "status",
variable = "latency",
time = "time",
data = data2,
group = NULL,
legend.title = "Latency to\nreach food\n(seconds)",
start_color="gray",
end_color="black",
alpha = 0.8,
xlab = "Days post release",
font.x =  12,
font.y = 12,
font.tickslab = 10,
ggtheme = theme_bw(),
xlim = c(0, 365),
break.time.by = 100,
censor = FALSE)
# arrange multi plot - moved from ggarrange to patchwork, seems to work better
combined_plot <- (s1$plot + s2) / (s3)+
plot_layout(guides = "collect") +
plot_annotation(tag_levels = 'A')
combined_plot
# and separately format data for survival analysis
data2 <- data <- read_csv("data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!bird %in% c("Daisy", "Star")) %>%
mutate(time = persist,
status = ifelse(to_360 == 0, 1, 0),
sex = factor(sex),
score = factor(score)) %>%
select(-c(persist, to_90, to_360))
# and separately format data for survival analysis
data2 <- data <- read_csv("Output/data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!bird %in% c("Daisy", "Star")) %>%
mutate(time = persist,
status = ifelse(to_360 == 0, 1, 0),
sex = factor(sex),
score = factor(score)) %>%
select(-c(persist, to_90, to_360))
# and separately format data for survival analysis
data2 <- data <- read_csv("Output/data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!bird %in% c("Daisy", "Star")) %>%
mutate(time = persist,
status = ifelse(to_363 == 0, 1, 0),
sex = factor(sex),
score = factor(score)) %>%
select(-c(persist, to_90, to_363))
s1 <- survminer::ggsurvplot(survfit(Surv(time, status) ~ sex, data2),
conf.int = TRUE,
legend.title = "Sex",
legend = "right",
palette = c("#298c8c", "#f1a226"),
legend.labs = c("Female", "Male"),
xlab = "Days post release",
font.x =  12,
font.y = 12,
font.tickslab = 10,
ggtheme = theme_bw(),
xlim = c(0, 365),
break.time.by = 100,
censor = FALSE)
s2 <-  contsurvplot::plot_surv_area(model = coxph(Surv(time, status) ~ weight, data2, x= TRUE),
status = "status",
variable = "weight",
time = "time",
data = data2,
group = NULL,
legend.title = "Pre release\nweight (g)",
start_color="gray",
end_color="black",
alpha = 0.8,
xlab = "Days post release",
font.x =  12,
font.y = 12,
font.tickslab = 10,
ggtheme = theme_bw(),
xlim = c(0, 365),
break.time.by = 100,
censor = FALSE)
s3 <- contsurvplot::plot_surv_area(model = coxph(Surv(time, status) ~ sex * weight, data2, x= TRUE),
data = data2,
time = "time",
status = "status",
variable = "weight",
group = "sex",
start_color="gray",
end_color="black",
legend.title = "Pre release\nweight (g)",
xlab = "Days post release",
font.x =  12,
font.y = 12,
font.tickslab = 10,
ggtheme = theme_bw(),
xlim = c(0, 365),
break.time.by = 100,
censor = FALSE)
s4 <-  contsurvplot::plot_surv_area(model = coxph(Surv(time, status) ~ latency, data2, x = TRUE),
status = "status",
variable = "latency",
time = "time",
data = data2,
group = NULL,
legend.title = "Latency to\nreach food\n(seconds)",
start_color="gray",
end_color="black",
alpha = 0.8,
xlab = "Days post release",
font.x =  12,
font.y = 12,
font.tickslab = 10,
ggtheme = theme_bw(),
xlim = c(0, 365),
break.time.by = 100,
censor = FALSE)
# arrange multi plot - moved from ggarrange to patchwork, seems to work better
combined_plot <- (s1$plot + s2) / (s3)+
plot_layout(guides = "collect") +
plot_annotation(tag_levels = 'A')
combined_plot
# save
ggsave("plots/weight_sex_persistence.png", dpi = 400, width = 20, height = 12, units = "cm")
# save
ggsave("plots/weight_sex_persistence.png", dpi = 400, width = 20, height = 14, units = "cm")
# and latency by itself
s4
# save
ggsave("plots/latency_persistence.png", dpi = 400, width = 10, height = 7, units = "cm")
# save
ggsave("plots/latency_persistence.png", dpi = 400, width = 14, height = 10, units = "cm")
# default theme options for all plots
theme <- function(){
list(
geom_violin(),
geom_point(),
facet_wrap(~period),
xlab(element_blank()),
theme_classic(),
scale_x_discrete(labels = c("Survived", "Died")),
ggplot2::theme(axis.title.y = element_text(size = 11))
)
}
# list of plots
g1 <- ggplot(data, aes(Survival, latency))+
ylab("Latency to reach food (s)")+
theme()
g2 <- ggplot(data, aes(Survival, alert))+
ylab("Time spent alert %")+
theme()
g3 <- ggplot(data, aes(Survival, weight))+
ylab("Pre-release weight (g)")+
theme()
g4 <- ggplot(data, aes(x = Survival, y = weight, color = sex)) +
ylab("Pre-release weight (g)") +
geom_violin(aes(group = interaction(Survival, sex, period)),
position = position_dodge(width = 0.9)) +
geom_point(aes(group = interaction(Survival, sex, period)),
position = position_dodge(width = 0.9)) +
facet_wrap(~period) +
scale_colour_manual(values = c("#298c8c", "#f1a226"),
name = "Sex")+
xlab(element_blank()) +
theme_classic()+
scale_x_discrete(labels = c("Survived", "Died"))+
ggplot2::theme(axis.title.y = element_text(size = 11))
g5 <- ggplot(data)+
geom_bar(aes(x = score, fill = Survival), position="fill")+
theme_classic() +
scale_fill_manual(values = c("gray", "gray5"),
labels = c("Survived", "Died"),
name = "Survival") +
facet_wrap(~period) +
xlab("Handling score") +
ylab("Survival proportion")+
ggplot2::theme(axis.title.y = element_text(size = 11))
g6 <- ggplot(data)+
geom_bar(aes(x = sex, fill = Survival), position = "fill")+
theme_classic() +
scale_fill_manual(values = c("gray", "gray5"),
labels = c("Survived", "Died"),
name = "Survival") +
facet_wrap(~period) +
xlab("Sex") +
ylab("Survival proportion")+
ggplot2::theme(axis.title.y = element_text(size = 11))
# arrange multi plot - moved from ggarrange to patchwork, seems to work better
combined_plot <- (g1 + g2) / (g3 + g4) / (g5 + g6) +
plot_layout(guides = "collect") +
plot_annotation(tag_levels = 'A')
combined_plot
# read in data
data <- read_csv("data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!bird %in% c("Daisy", "Star")) %>%
# rename period labels to look nicer on graphs
rename("90 days" = to_90,
"1 year" = to_360) %>%
# pivot wider on period
pivot_longer(3:4, names_to = "period", values_to = "survived") %>%
rename(Survival = survived) %>%
# categorical variables as factors
mutate(period = as_factor(period),
score = as_factor(score),
Survival = factor(Survival, levels = c("1", "0")))
# read in data
data <- read_csv("Output/data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!bird %in% c("Daisy", "Star")) %>%
# rename period labels to look nicer on graphs
rename("90 days" = to_90,
"1 year" = to_360) %>%
# pivot wider on period
pivot_longer(3:4, names_to = "period", values_to = "survived") %>%
rename(Survival = survived) %>%
# categorical variables as factors
mutate(period = as_factor(period),
score = as_factor(score),
Survival = factor(Survival, levels = c("1", "0")))
# read in data
data <- read_csv("Output/data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!bird %in% c("Daisy", "Star")) %>%
# rename period labels to look nicer on graphs
rename("90 days" = to_90,
"1 year" = to_363) %>%
# pivot wider on period
pivot_longer(3:4, names_to = "period", values_to = "survived") %>%
rename(Survival = survived) %>%
# categorical variables as factors
mutate(period = as_factor(period),
score = as_factor(score),
Survival = factor(Survival, levels = c("1", "0")))
# default theme options for all plots
theme <- function(){
list(
geom_violin(),
geom_point(),
facet_wrap(~period),
xlab(element_blank()),
theme_classic(),
scale_x_discrete(labels = c("Survived", "Died")),
ggplot2::theme(axis.title.y = element_text(size = 11))
)
}
# list of plots
g1 <- ggplot(data, aes(Survival, latency))+
ylab("Latency to reach food (s)")+
theme()
g2 <- ggplot(data, aes(Survival, alert))+
ylab("Time spent alert %")+
theme()
g3 <- ggplot(data, aes(Survival, weight))+
ylab("Pre-release weight (g)")+
theme()
g4 <- ggplot(data, aes(x = Survival, y = weight, color = sex)) +
ylab("Pre-release weight (g)") +
geom_violin(aes(group = interaction(Survival, sex, period)),
position = position_dodge(width = 0.9)) +
geom_point(aes(group = interaction(Survival, sex, period)),
position = position_dodge(width = 0.9)) +
facet_wrap(~period) +
scale_colour_manual(values = c("#298c8c", "#f1a226"),
name = "Sex")+
xlab(element_blank()) +
theme_classic()+
scale_x_discrete(labels = c("Survived", "Died"))+
ggplot2::theme(axis.title.y = element_text(size = 11))
g5 <- ggplot(data)+
geom_bar(aes(x = score, fill = Survival), position="fill")+
theme_classic() +
scale_fill_manual(values = c("gray", "gray5"),
labels = c("Survived", "Died"),
name = "Survival") +
facet_wrap(~period) +
xlab("Handling score") +
ylab("Survival proportion")+
ggplot2::theme(axis.title.y = element_text(size = 11))
g6 <- ggplot(data)+
geom_bar(aes(x = sex, fill = Survival), position = "fill")+
theme_classic() +
scale_fill_manual(values = c("gray", "gray5"),
labels = c("Survived", "Died"),
name = "Survival") +
facet_wrap(~period) +
xlab("Sex") +
ylab("Survival proportion")+
ggplot2::theme(axis.title.y = element_text(size = 11))
# arrange multi plot - moved from ggarrange to patchwork, seems to work better
combined_plot <- (g1 + g2) / (g3 + g4) / (g5 + g6) +
plot_layout(guides = "collect") +
plot_annotation(tag_levels = 'A')
combined_plot
# save
ggsave("plots/binary_response_figure.png", dpi = 400, width = 22, height = 18, units = "cm")
# save
ggsave("plots/binary_response_figure.png", dpi = 400, width = 22, height = 20, units = "cm")
