dplyr::select(-c(date, notes))
# Plot frequency of handling scores
ggplot(handling)+
geom_bar(aes(score))+
scale_y_continuous(breaks =c(1,3,5,7,9))+
theme_minimal()+
ggplot2::theme(panel.grid.minor = element_blank())
# Chunk 5: behaviours
# Ethogram
eth <- matrix(c("A", "Alert",
"C", "Calling",
"D", "Defensive wing display",
"E", "Eating/drinking",
"F", "Fluff",
"HB", "Head bob",
"HT", "Head tilt",
"I", "Sitting",
"N", "Camouflaged walk",
"O", "Courtship",
"P", "Preening",
"S", "Standing",
"W", "Walking",
"TW", "Tail wag",
"Z", "Out of frame"),
ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
rename(code = V1,
Behaviour = V2)
# Assign plotting order of behaviours
order <- c("Alert", "Head bob", "Head tilt", "Tail wag", "Camouflaged walk",
"Defensive wing display", "Calling", "Eating/drinking", "Courtship",
"Fluff", "Preening", "Sitting", "Standing", "Walking", "Out of frame")
# Read in and tidy up video assays
behaviour <- read_excel("Input/bsc traits and assay data.xlsx", sheet = "Video encoding") %>%
clean_names() %>%
# Drop metadata columns
dplyr::select(-c("clip", "note")) %>%
# Convert from wide to long
pivot_longer(3:61, names_to = "second", values_to = "code") %>%
# Convert seconds into numeric
mutate(second = as.numeric(str_remove(second, "x"))) %>%
# Drop instances of out of frame
filter(!code == "Z") %>%
# Lump all variations of head tilt
mutate(code = ifelse(code %in% c("HBT", "HTB", "HTW"), "HT", code)) %>%
# Add behaviour descriptions from ethogram
left_join(eth) %>%
# Turn behaviour into a factor to assign order for plotting
mutate(Behaviour = factor(Behaviour, levels = order)) %>%
# Assign vigilance to 1 and not to 0
mutate(vigilant = ifelse(code %in%
c("A", "D", "HB", "HT", "TW", "N"), 1, 0)) %>%
# Drop lines without recordings (primarily for Prem and Rove who had 10 second clips)
na.omit()
# Plot proportion of time spent in each behaviour per bird
ggplot(behaviour) +
geom_bar(aes(x= identity, fill = Behaviour), position = "fill")+
labs(x= element_blank(),
y = "Proportion of time spent in each behaviour")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
theme_minimal()+
ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank())+
scale_fill_viridis_d(direction = -1)
# save to file
ggsave("plots/time_spent_behaviours.png", dpi = 400, width = 20, height = 15, units = "cm", bg = 'white')
# Calculate proportion of time spent in each behaviour and a summed 'alert' metric
time <- count(behaviour, identity) %>%
rename(total = n)
prop_behav <- count(behaviour, identity, code) %>%
left_join(time) %>%
# Divide count of behaviour by total time for %
mutate(prop = n/total) %>%
dplyr::select(-c(n, total)) %>%
# Pivot wider, one column per behaviour
pivot_wider(names_from = code, values_from = prop) %>%
# Replace NAs for behaviour with zeroes
replace(is.na(.), 0) %>%
# Add column for summed 'alert' measure
mutate(alert = A + HB + HT + TW + N + D)
# Plot time spent alert
ggplot(prop_behav) +
geom_bar(aes(x= identity, y= alert), position = "dodge", stat = "identity")+
labs(x= element_blank(),
y = "Proportion of time spent in alert behaviours")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
theme_minimal()+
ggplot2::theme(panel.grid.minor = element_blank())
# Check distribution of behaviours
hist(prop_behav$alert)
# Summarise allocation of behaviours
prop_behav_sum <- prop_behav %>%
summarise(across(where(is.numeric),list(mean = mean, sd = sd))) %>%
pivot_longer(1:30)
# Chunk 6: traits
# Sex
sex <- read_excel("Input/bsc traits and assay data.xlsx", sheet = "Metadata") %>%
clean_names() %>%
select(c(identity, sex))
# Pre-release weights
weights <- read_excel("Input/bsc traits and assay data.xlsx", sheet = "Weights") %>%
clean_names() %>%
# drop unneeded date column
dplyr::select(-date)
# combine
traits <- left_join(sex, weights)
# Summary of weights
weight_sum <- traits %>%
group_by(sex) %>%
summarise(weight_mean = mean(weight),
weight_sd = sd(weight))
# Chunk 7: traits 2
# Weight by sex
ggplot(traits, aes(x = sex, y = weight))+
geom_boxplot()+
theme_minimal()
# Chunk 8: survival
# Read in survival data
survival <- read_excel("Input/bsc traits and assay data.xlsx", sheet = "Survival") %>%
clean_names() %>%
# Limit persistence value to minimum common tracked time of 360
mutate(persist = ifelse(persist>363, 363, persist)) %>%
# Convert true and false to 0 and 1
mutate(to_90 = ifelse(to_90 == FALSE, 0, 1),
to_363 = ifelse(to_363 == FALSE, 0, 1)) %>%
# Drop unneeded columns
dplyr::select(c(identity, persist, to_90, to_363))
# Combine all traits and response (survival)
data <- left_join(survival, mlatency) %>%
left_join(handling) %>%
left_join(prop_behav) %>%
left_join(traits) %>%
# Drop un-needed behaviour columns
dplyr::select(-c(A, C, E, F, HB, HT, N, O, P, S, TW, W, D, I))
# Write table to file
write.csv(data, row.names = FALSE, "Output/data_table.csv")
# Chunk 9
# read in data
data <- read_csv("Output/data_table.csv") %>%
# drop Star and Daisy
filter(!identity %in% c("Daisy", "Star"))
# Chunk 10: correlated assay
m0 <- glm(score ~ alert * latency,
data = data)
summary(m0)
# Chunk 11: m1
# m1a: Does proportion of time spent alert predict survival to 90 days?
## Violin plot
ggplot(data, aes(x= to_90, y = alert, group=to_90))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 90-days post-release",
y = "Proportion of time spent alert")+
theme_minimal()+
ggplot2::theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m1a <- glm(to_90 ~ scale(alert),
data = data,
family = binomial())
summary(m1a)
# m1b: Does proportion of time spent alert predict survival to 1 year?
## Violin plot
ggplot(data, aes(x= to_363, y = alert, group=to_363))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 1 year post-release",
y = "Proportion of time spent alert")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m1b <- glm(to_363 ~ scale(alert),
data = data,
family = binomial())
summary(m1b)
# Chunk 12: m2a
# m2a: Does latency to reach food predict survival to 90 days?
## Violin plot
ggplot(data, aes(x= to_90, y =sqrt(latency), group=to_90))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 90-days post-release",
y = "Latency to reach food (squareroot transformed)")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m2a <- glm(to_90 ~ scale(sqrt(latency)),
data = data,
family = binomial())
summary(m2a)
# Survival probability
exp(coef(m2a))
# Chunk 13: m2b
# m2b: Does latency to reach food predict survival? To 1 year.
## Violin plot
ggplot(data, aes(x= to_363, y=sqrt(latency), group=to_363))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 1-year post-release",
y = "Latency to reach food (squareroot transformed)")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m2b <- glm(to_363 ~ scale(sqrt(latency)),
data = data,
family = binomial())
summary(m2b)
# Chunk 14: m3
# m3a: Does handling predict survival to 90 days?
## Mosaic plot
mosaicplot(table(data$to_90, data$score),
main = NULL,
xlab = "Survival to 90-days post-release",
ylab = "Handling score")
## Chisq test
m3a <- chisq.test(table(data$to_90, data$score))
m3a
# m3b: Does handling predict survival to 1 year?
## Mosaic plot
mosaicplot(table(data$to_363, data$score),
main = NULL,
xlab = "Survival to 1-year post-release",
ylab = "Handling score")
## Chisq test
m3b <- chisq.test(table(data$to_363, data$score))
m3b
# Chunk 15: m4
# m4a: Does weight predict survival to 90 days?
## Violin plot
ggplot(data, aes(x= to_90, y=weight, group=to_90))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 90-days post-release",
y = "Pre-release weight")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m4a <- glm(to_90 ~ scale(weight),
data = data,
family = binomial())
summary(m4a)
# m4b: Does weight predict survival to 1 year?
## Violin plot
ggplot(data, aes(x= to_363, y=weight, group=to_363))+
geom_violin()+
geom_point(size = 2)+
labs(x= "Survival to 1-year post-release",
y = "Pre-release weight")+
theme_minimal()+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = c(0,1), labels = c(FALSE, TRUE))
## Logistic regression with binomial family
m4b <- glm(to_363 ~ scale(weight),
data = data,
family = binomial())
summary(m4b)
# Chunk 16: m5
# m5a: Does sex predict survival? To 90 days.
## Mosaic plot
mosaicplot(table(data$to_90, data$sex),
main = NULL,
xlab = "Survival to 90-days post-release",
ylab = "Sex")
chisq.test(table(data$to_90, data$sex))
## Logistic regression with binomial family
m5a <- glm(to_90 ~ sex,
data = data,
family = binomial())
summary(m5a)
# m5b: Does sex predict survival? To 1 year.
## Mosaic plot
mosaicplot(table(data$to_363, data$sex),
main = NULL,
xlab = "Survival to 1-year post-release",
ylab = "Sex")
chisq.test(table(data$to_363, data$sex))
## Logistic regression with binomial family
m5b <- glm(to_363 ~ sex,
data = data,
family = binomial())
summary(m5b)
# Chunk 17
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- data %>%
mutate(time = persist,
status = ifelse(to_363 == 0, 1, 0),
sex = as.factor(sex),
condition = as.factor(condition),
score = as.factor(score)) %>%
select(-c(persist, to_90, to_363))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- data %>%
mutate(time = persist,
status = ifelse(to_363 == 0, 1, 0),
sex = as.factor(sex),
score = as.factor(score)) %>%
select(-c(persist, to_90, to_363))
# Fit a survival model
m6 <- survfit(Surv(time, status) ~ 1, km)
# Estimated survival probabilities
summary(m6, times = c(1,90, 180, 270, 360))
# Fit a survival model
m6 <- survfit(Surv(time, status) ~ 1, km)
# Estimated survival probabilities
summary(m6, times = c(1,90, 180, 270, 363))
# Fit a survival model with latency as the continuous variable
m7 <- coxph(Surv(time, status) ~ sqrt(latency), km, x= TRUE)
# Plot the survival area
plot_surv_area(model = m7, data = km,
time = "time", status = "status", variable = "latency", group = NULL)
# Test effect of latency - log rank test
summary(m7)
# Fit a survival model with alert behaviour as the continuous variable
m8 <- coxph(Surv(time, status) ~ alert, km, x= TRUE)
# Plot the survival area
plot_surv_area(model = m8, data = km,
time = "time", status = "status", variable = "alert", group = NULL)
# Test effect of alert behaviour - log rank test
summary(m8)
# Weight
m9a <- coxph(Surv(time, status) ~ weight, km, x= TRUE)
summary(m9a)
# Sex
m9b <- coxph(Surv(time, status) ~ sex, km)
summary(m9b)
m9c <- coxph(Surv(time, status) ~ weight * sex, km, x= TRUE)
# Plot the survival area
plot_surv_area(model = m9c, data = km,
time = "time", status = "status", variable = "weight", group = "sex")
# Test effect of weight - log rank test
summary(m9c)
# read in data
data <- read_csv("Output/data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!identity %in% c("Daisy", "Star")) %>%
# rename period labels to look nicer on graphs
rename("90 days" = to_90,
"1 year" = to_363) %>%
# pivot wider on period
pivot_longer(3:4, names_to = "period", values_to = "survived") %>%
rename(Survival = survived) %>%
# categorical variables as factors
mutate(period = as_factor(period),
score = as_factor(score),
Survival = factor(Survival, levels = c("1", "0")))
# and separately format data for survival analysis
data2 <- data <- read_csv("Output/data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!bird %in% c("Daisy", "Star")) %>%
mutate(time = persist,
status = ifelse(to_363 == 0, 1, 0),
sex = factor(sex),
score = factor(score)) %>%
select(-c(persist, to_90, to_363))
# and separately format data for survival analysis
data2 <- data <- read_csv("Output/data_table.csv", show_col_types = FALSE) %>%
# drop Star and Daisy
filter(!identity %in% c("Daisy", "Star")) %>%
mutate(time = persist,
status = ifelse(to_363 == 0, 1, 0),
sex = factor(sex),
score = factor(score)) %>%
select(-c(persist, to_90, to_363))
summary(m1)
summary(m1A)
summary(m1a)
# Load packages
pacman::p_load(contsurvplot, ggpubr, glmmTMB, janitor, modelsummary, MuMIn, patchwork, performance, readxl, sjPlot, survival, survminer, tidyverse)
m3a
m3b
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b)
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b))
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b))
?modelsummary
getOption("modelsummary_output")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b), output = "Output/model_summary_binary.csv")
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- data %>%
mutate(time = persist,
status = ifelse(to_363 == 0, 1, 0),
sex = as.factor(sex),
score = as.factor(score)) %>%
select(-c(persist, to_90, to_363))
View(survival)
# Combine all traits and response (survival)
data <- left_join(survival, mlatency) %>%
left_join(handling) %>%
left_join(prop_behav) %>%
left_join(traits) %>%
# Drop un-needed behaviour columns
dplyr::select(-c(A, C, E, F, HB, HT, N, O, P, S, TW, W, D, I))
View(data)
# read in data
data <- read_csv("Output/data_table.csv") %>%
# drop Star and Daisy
filter(!identity %in% c("Daisy", "Star"))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- data %>%
mutate(time = persist,
status = ifelse(to_363 == 0, 1, 0),
sex = as.factor(sex),
score = as.factor(score)) %>%
select(-c(persist, to_90, to_363))
# Fit a survival model
m6 <- survfit(Surv(time, status) ~ 1, km)
# Estimated survival probabilities
summary(m6, times = c(1,90, 180, 270, 363))
# Fit a survival model with latency as the continuous variable
m7 <- coxph(Surv(time, status) ~ sqrt(latency), km, x= TRUE)
# Plot the survival area
plot_surv_area(model = m7, data = km,
time = "time", status = "status", variable = "latency", group = NULL)
# Test effect of latency - log rank test
summary(m7)
# Fit a survival model with alert behaviour as the continuous variable
m8 <- coxph(Surv(time, status) ~ alert, km, x= TRUE)
# Plot the survival area
plot_surv_area(model = m8, data = km,
time = "time", status = "status", variable = "alert", group = NULL)
# Test effect of alert behaviour - log rank test
summary(m8)
# Weight
m9a <- coxph(Surv(time, status) ~ weight, km, x= TRUE)
summary(m9a)
# Sex
m9b <- coxph(Surv(time, status) ~ sex, km)
summary(m9b)
m9c <- coxph(Surv(time, status) ~ weight * sex, km, x= TRUE)
# Plot the survival area
plot_surv_area(model = m9c, data = km,
time = "time", status = "status", variable = "weight", group = "sex")
# Test effect of weight - log rank test
summary(m9c)
# time-to-event model effects
modelsummary(list(m7, m8, m9a, m9b, m9c))
# time-to-event model effects
modelsummary(list(m7, m8, m9a, m9b, m9c), vcov = "HAC")
m1a
summary(m1a)
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b), estimate = "p.value")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "p.value",   statistic = NULL, coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate} {p.value}",   statistic = NULL, coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate} [{std.error}] {p.value}",   statistic = NULL, coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate} [{std.error}] p = {p.value}",   statistic = NULL, coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate} [{std.error}] P = {p.value}",  coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate} ({std.error}), P = {p.value}", statistic = NULL, coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate} ({std.error}), P = {p.value}", statistic = NULL, coef_omit = "Intercept", output = "Output/model_summary_binary.csv")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate}", statistic = "{std.error}", statistic = "{p.value}", coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = c("{estimate}", "{std.error}", "{p.value}"), coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate}, {p.value}", statistic = "{std.error}", coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate}, P = {p.value}", statistic = "{std.error}", coef_omit = "Intercept")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate}, P = {p.value}", statistic = "{std.error}", coef_omit = "Intercept", output = "Output/model_summary_binary.csv")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate}, P = {p.value}", statistic = "{std.error}", coef_omit = "Intercept", output = "Output/model_summary_binary.csv")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate}", statistic = c("{std.error}", "{p.value}"), coef_omit = "Intercept", output = "Output/model_summary_binary.xlsx")
# binary response effects - not including hanlding which is chi squared instead of glm
modelsummary(list(m1a, m1b, m2a, m2b, m4a, m4b, m5a, m5b),
estimate = "{estimate}", statistic = c("{std.error}", "{p.value}"), coef_omit = "Intercept", output = "Output/model_summary_binary.csv")
m6
summary(m7)
# time-to-event model effects
modelsummary(list(m7, m8, m9a, m9b, m9c), estimate = "{coefficient")
# time-to-event model effects
modelsummary(list(m7, m8, m9a, m9b, m9c), estimate = "{coefficient}")
# time-to-event model effects
modelsummary(list(m7, m8, m9a, m9b, m9c),
estimate = "{estimate}", statistic = c("{std.error}", "{p.value}"), coef_omit = "Intercept")
# time-to-event model effects
modelsummary(list(m7, m8, m9a, m9b, m9c),
estimate = "{estimate}", statistic = c("{std.error}", "{p.value}"), coef_omit = "Intercept",
output = "Output/model_summary_time_to_event.csv"))
# time-to-event model effects
modelsummary(list(m7, m8, m9a, m9b, m9c),
estimate = "{estimate}", statistic = c("{std.error}", "{p.value}"), coef_omit = "Intercept",
output = "Output/model_summary_time_to_event.csv")
