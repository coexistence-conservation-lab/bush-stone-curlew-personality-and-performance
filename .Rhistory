df.sub$Ang.vertex = ifelse(df.sub$Ang.vertex < -180, (df.sub$Ang.vertex + 360), df.sub$Ang.vertex) #Ensure difference does not exceed 180 degrees in either circular direction
df.sub$Ang.vertex = ifelse(df.sub$Ang.vertex > 180, (df.sub$Ang.vertex - 360), df.sub$Ang.vertex) #Ensure difference does not exceed 180 degrees in either circular direction
df.sub$Ang.vertex = abs(df.sub$Ang.vertex) #Make angle absolute
#Calculate the incoming and outgoing speeds either side of angle vertex
df.sub = df.sub %>% group_by(Window.group) %>% mutate(Dist.lag = disty(Longitude, Latitude, Longitude.lag, Latitude.lag)) %>% ungroup()
df.sub = df.sub %>% group_by(Window.group) %>% mutate(Dist.lead = disty(Longitude, Latitude, Longitude.lead, Latitude.lead)) %>% ungroup()
#Lead of time difference
#Create lag and lead time difference (s) between values
df.sub = df.sub %>% group_by(Window.group) %>% mutate(Time.diff.lag = as.numeric(c(NA, difftime(Timestamp, dplyr::lag(Timestamp), units = "secs")[-1]))) %>% ungroup()
df.sub = df.sub %>% group_by(Window.group) %>% mutate(Time.diff.lead = dplyr::lead(Time.diff.lag, n = 1, default = NA)) %>% ungroup()
#Outgoing and incoming speed (m/s)
df.sub = df.sub %>% group_by(Window.group) %>% mutate(Outgoing.speed = Dist.lag / Time.diff.lag) %>% ungroup()
df.sub = df.sub %>% group_by(Window.group) %>% mutate(Incoming.speed = Dist.lead / Time.diff.lead) %>% ungroup()
#Evaluating the threshold
df.sub$R2 = ifelse(df.sub$Outgoing.speed >= Angle.speed & df.sub$Incoming.speed >= Angle.speed & df.sub$Ang.vertex <= Angle.thresh, TRUE, FALSE) #R2 = TRUE if GPS fix identified as erroneous
##Calculate Erroneous fixes if maximum speed threshold calculated using a user-defined stepping range is exceed --> R3###
#Shift longitude and latitude values backwards by the specified stepping range (Speed.step)
df.sub = df.sub %>% group_by(Window.group) %>% mutate(Longitude.lag.2 = dplyr::lag(Longitude, n = Speed.step, default = NA)) %>% ungroup()
df.sub = df.sub %>% group_by(Window.group) %>% mutate(Latitude.lag.2 = dplyr::lag(Latitude, n = Speed.step, default = NA)) %>% ungroup()
#Calculate time difference between the specified stepping range (Speed.step)
df.sub = df.sub %>% group_by(Window.group) %>% mutate(Time.diff.lag.2 = as.numeric(c(NA, difftime(Timestamp, dplyr::lag(Timestamp, n = Speed.step, default = NA), units = "secs")[-1]))) %>% ungroup()
#Calculate the speed across the specified 'Speed.step' stepping range
df.sub$Maximum.speed = with(df.sub, disty(Longitude, Latitude, Longitude.lag.2, Latitude.lag.2) / Time.diff.lag.2)
#Evaluating the threshold
df.sub$R3 = ifelse(df.sub$Maximum.speed >= Max.speed, TRUE, FALSE) #R3 = TRUE if GPS fix identified as erroneous
#Replace possible NAs in R1, R2 & R3 to FALSE
df.sub$R1 = ifelse(is.na(df.sub$R1) == TRUE, FALSE, df.sub$R1)
df.sub$R2 = ifelse(is.na(df.sub$R2) == TRUE, FALSE, df.sub$R2)
df.sub$R3 = ifelse(is.na(df.sub$R3) == TRUE, FALSE, df.sub$R3)
#If at least one threshold is passed, then 'Possible outlier', if all thresholds surpassed, then 'Unanimous outlier', if no thresholds surpassed, then 'Not anomalous'
df.sub$Verdict = ifelse(df.sub$R1 == TRUE & df.sub$R2 == TRUE & df.sub$R3 == TRUE, "Unanimous outlier", ifelse(df.sub$R1 == TRUE | df.sub$R2 == TRUE | df.sub$R3 == TRUE, "Possible outlier", "Not anomalous"))
#df.sub$Verdict = as.character(factor(df.sub$Verdict, levels = c("Not anomalous", "Possible outlier", "Unanimous outlier"))) #Ensure factor levels are ordered for plotting purposes
#Remove redundant columns / vectors
rm(Observation, x, Window.group)
rm(df)
df.sub = df.sub[, c('Observation', 'Timestamp', 'Time.diff', 'Longitude', 'Latitude', 'Fix.number', 'Window.group', 'Dist.from.median', 'R1', 'Ang.vertex', 'Outgoing.speed', 'Incoming.speed', 'R2', 'Maximum.speed', 'R3', 'Verdict')]
################################################################################################################################################
################################################################################################################################################
###Isolation forest component of function###
##check if default isolation forest sample size settings need to be adjusted
if(nrow(df.sub) < 256){
sample_size = nrow(df.sub)
}else{
sample_size = 256
}
#Begin anomaly detection
message("Initiating Isolation forest anomaly detection")
if(all(diff((df.sub$Timestamp)) > 0) == FALSE){
stop("Timestamps may be out of order - Ensure that timestamps are in ascending order")
}
#All variables together
indexs = with(df.sub, which(complete.cases(Dist.from.median, Ang.vertex, Outgoing.speed, Incoming.speed, Maximum.speed) == TRUE)) #Row numbers with complete cases across the columns of interest (non-NA values)
COLS = c("Dist.from.median", "Ang.vertex", "Outgoing.speed", "Incoming.speed", "Maximum.speed") #Columns of interest
COLS = which(names(df.sub) %in% COLS == TRUE) #Index of where columns occur in 'df.sub'
subset = df.sub[indexs, COLS] #Subset just columns of interest
iforest = isolationForest$new(sample_size = sample_size)
invisible(capture.output(iforest$fit(subset)))
scores = iforest$predict(subset)
df.sub$I.F_overall_anomaly_score = NA
df.sub$I.F_overall_anomaly_score[indexs] = scores$anomaly_score
#Just 'Dist.from.median' [R1]
indexs = with(df.sub, which(complete.cases(Dist.from.median) == TRUE)) #Row numbers with non-NA values
subset = as.data.frame(df.sub$Dist.from.median[indexs]) #Subset just column of interest
iforest = isolationForest$new(sample_size = sample_size)
invisible(capture.output(iforest$fit(subset)))
scores = iforest$predict(subset)
df.sub$I.F_anomaly_score_R1 = NA
df.sub$I.F_anomaly_score_R1[indexs] = scores$anomaly_score
#Just 'Ang.vertex', 'Outgoing.speed' and 'Incoming.speed' [R2]
indexs = with(df.sub, which(complete.cases(Ang.vertex, Outgoing.speed, Incoming.speed) == TRUE)) #Row numbers with complete cases across the columns of interest (non-NA values)
COLS = c("Ang.vertex", "Outgoing.speed", "Incoming.speed") #Columns of interest
COLS = which(names(df.sub) %in% COLS == TRUE) #Index of where columns occur in 'df.sub'
subset = df.sub[indexs, COLS] #Subset just columns of interest
iforest = isolationForest$new(sample_size = sample_size)
invisible(capture.output(iforest$fit(subset)))
scores = iforest$predict(subset)
df.sub$I.F_anomaly_score_R2 = NA
df.sub$I.F_anomaly_score_R2[indexs] = scores$anomaly_score
#Just 'Maximum.speed' [R3]
indexs = with(df.sub, which(complete.cases(Maximum.speed) == TRUE)) #Row numbers with non-NA values
subset = as.data.frame(df.sub$Maximum.speed[indexs]) #Subset just column of interest
iforest = isolationForest$new(sample_size = sample_size)
invisible(capture.output(iforest$fit(subset)))
scores = iforest$predict(subset)
df.sub$I.F_anomaly_score_R3 = NA
df.sub$I.F_anomaly_score_R3[indexs] = scores$anomaly_score
#Which rows correspond to being >= I.F_conf quantile (for R1, R2, R3, and combined)
R1_outliers = which(df.sub$I.F_anomaly_score_R1 >= as.numeric(quantile(df.sub$I.F_anomaly_score_R1, I.F_conf, na.rm = TRUE)))
R2_outliers = which(df.sub$I.F_anomaly_score_R2 >= as.numeric(quantile(df.sub$I.F_anomaly_score_R2, I.F_conf, na.rm = TRUE)))
R3_outliers = which(df.sub$I.F_anomaly_score_R3 >= as.numeric(quantile(df.sub$I.F_anomaly_score_R3, I.F_conf, na.rm = TRUE)))
overall_outliers = which(df.sub$I.F_overall_anomaly_score >= as.numeric(quantile(df.sub$I.F_overall_anomaly_score, I.F_conf, na.rm = TRUE)))
R1_outliers = R1_outliers[-which(R1_outliers %in% overall_outliers == TRUE)]
R2_outliers = R2_outliers[-which(R2_outliers %in% overall_outliers == TRUE)]
R3_outliers = R3_outliers[-which(R3_outliers %in% overall_outliers == TRUE)]
#Label as "Not anomalous", "Possible outlier", "Unanimous outlier", according to whether none, some or all thresholds were surpassed
df.sub$Verdict_IF = "Not anomalous"
df.sub$Verdict_IF[R1_outliers] = "Possible outlier"
df.sub$Verdict_IF[R2_outliers] = "Possible outlier"
df.sub$Verdict_IF[R3_outliers] = "Possible outlier"
df.sub$Verdict_IF[overall_outliers] = "Unanimous outlier"
###Plot results###
if(plot == TRUE){
#summary plots - 'Thresholds'
old.par <- par(mar = c(0, 0, 0, 0))
#(1) Distribution of Distance from median (R1)
par(old.par)
par(mfrow = c(2,2))
h = hist(df.sub$Dist.from.median, breaks="Scott", plot=TRUE, main = "Distance from median (m)",
xlab = "Distance from median (m) [R1]", ylab = "Density", cex.lab = 1.2,  freq = FALSE)
text(Dist.thresh, max(h$density), labels = paste("R1 =", Dist.thresh), col = "blue", cex = 0.8) # User defined 'Dist.thresh [R1]'
text(quantile(df.sub$Dist.from.median, 0.95, na.rm = TRUE), max(h$density)/1.7, labels = "95%", col = "green", cex = 0.8) # 95%
text(quantile(df.sub$Dist.from.median, 0.99, na.rm = TRUE), max(h$density)/3.2, labels = "99%", col = "red", cex = 0.8) # 99%
clip(x1 = min(h$breaks),
x2 = max(h$breaks),
y1 = min(h$density),
y2 = max(h$density) - max(h$density)/10)
abline(v = Dist.thresh, col="blue", lwd=1.5, lty=2) # User defined 'Dist.thresh [R1]'
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/2)
abline(v = quantile(df.sub$Dist.from.median, 0.95, na.rm = TRUE), col="green", lwd=1.5, lty=2) #95% quantile
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/4)
abline(v = quantile(df.sub$Dist.from.median, 0.99, na.rm = TRUE), col="red", lwd=1.5, lty=2) #99 % quantile
#Zoom in
par(fig = c(0.2, 0.49, 0.65, 0.99), new = T)
h = hist(df.sub$Dist.from.median, breaks="Scott", plot=TRUE, main = "",
xlab = "", ylab = "", freq = FALSE, xlim = c(0, quantile(df.sub$Dist.from.median, 0.99, na.rm = TRUE)))
if(Dist.thresh < quantile(df.sub$Dist.from.median, 0.99, na.rm = TRUE)){
text(Dist.thresh, max(h$density), labels = paste("R1 =", Dist.thresh), col = "blue", cex = 0.8) # User defined 'Dist.thresh [R1]'
}
text(quantile(df.sub$Dist.from.median, 0.95, na.rm = TRUE), max(h$density)/1.7, labels = "95%", col = "green", cex = 0.8) # 95%
text(quantile(df.sub$Dist.from.median, 0.99, na.rm = TRUE), max(h$density)/3.2, labels = "99%", col = "red", cex = 0.8) # 99%
if(Dist.thresh < quantile(df.sub$Dist.from.median, 0.99, na.rm = TRUE)){
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density) - max(h$density)/10)
}
abline(v = Dist.thresh, col="blue", lwd=1.5, lty=2) # User defined 'Dist.thresh [R1]'
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/2)
abline(v = quantile(df.sub$Dist.from.median, 0.95, na.rm = TRUE), col="green", lwd=1.5, lty=2) #95% quantile
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/4)
abline(v = quantile(df.sub$Dist.from.median, 0.99, na.rm = TRUE), col="red", lwd=1.5, lty=2) #99 % quantile
#(2) Distribution of Angle between 3 fixes (R2)
par(fig = c(0.5, 1, 0.5, 1), new = T)
h = hist(df.sub$Ang.vertex, breaks = 60, plot=TRUE, main = "Angle between 3 fixes (°)",
xlab = "Angle between 3 fixes (°) [R2]", ylab = "Density", cex.lab = 1.2,  freq = FALSE, xaxt = "n")
axis(1, at=seq(0,180,by=20), labels=seq(0,180,by=20))
text(Angle.thresh, max(h$density), labels = paste("R2 =", Angle.thresh), col = "blue", cex = 0.8) # User defined 'Angle.thresh [R1]'
text(quantile(df.sub$Ang.vertex, 0.05, na.rm = TRUE), max(h$density)/1.7, labels = "0.5%", col = "green", cex = 0.8) # 0.5%
text(quantile(df.sub$Ang.vertex, 0.01, na.rm = TRUE), max(h$density)/3.2, labels = "0.01%", col = "red", cex = 0.8) # 0.01%
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density) - max(h$density)/10)
abline(v = Angle.thresh, col="blue", lwd=1.5, lty=2) # User defined 'Angle.thresh [R2]'
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/2)
abline(v = quantile(df.sub$Ang.vertex, 0.05, na.rm = TRUE), col="green", lwd=1.5, lty=2) #95% quantile
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/4)
abline(v = quantile(df.sub$Ang.vertex, 0.01, na.rm = TRUE), col="red", lwd=1.5, lty=2) #99 % quantile
#(3) Distribution of Outgoing/Incoming speed (R2)
par(fig = c(0, 0.5, 0, 0.5), new = T)
h = hist(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), breaks="Scott", plot=TRUE, main = "Outgoing/Incoming speed (m/s)",
xlab = "Outgoing/Incoming speed (m/s) [R2]", ylab = "Density", cex.lab = 1.2,  freq = FALSE)
text(Angle.speed, max(h$density), labels = paste("R2 =", Angle.speed), col = "blue", cex = 0.8) # User defined 'Angle.speed [R2]'
text(quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.95, na.rm = TRUE), max(h$density)/1.7, labels = "95%", col = "green", cex = 0.8) # 95%
text(quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.99, na.rm = TRUE), max(h$density)/3.2, labels = "99%", col = "red", cex = 0.8) # 99%
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density) - max(h$density)/10)
abline(v = Angle.speed, col="blue", lwd=1.5, lty=2) # User defined 'Dist.thresh [R1]'
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/2)
abline(v = quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.95, na.rm = TRUE), col="green", lwd=1.5, lty=2) #95% quantile
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/4)
abline(v = quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.99, na.rm = TRUE), col="red", lwd=1.5, lty=2) #99 % quantile
#Zoom in
par(fig = c(0.2, 0.49, 0.15, 0.49), new = T)
h = hist(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), breaks="Scott", plot=TRUE, main = "",
xlab = "", ylab = "", freq = FALSE, xlim = c(0, quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.99, na.rm = TRUE)))
if(Angle.speed < quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.99, na.rm = TRUE)){
text(Angle.speed, max(h$density), labels = paste("R2 =", Angle.speed), col = "blue", cex = 0.8) # User defined 'Angle.speed [R2]'
}
text(quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.95, na.rm = TRUE), max(h$density)/1.7, labels = "95%", col = "green", cex = 0.8) # 95%
text(quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.99, na.rm = TRUE), max(h$density)/3.2, labels = "99%", col = "red", cex = 0.8) # 99%
if(Angle.speed < quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.99, na.rm = TRUE)){
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density) - max(h$density)/10)
abline(v = Angle.speed, col="blue", lwd=1.5, lty=2) # User defined 'Dist.thresh [R1]'
}
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/2)
abline(v = quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.95, na.rm = TRUE), col="green", lwd=1.5, lty=2) #95% quantile
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/4)
abline(v = quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.99, na.rm = TRUE), col="red", lwd=1.5, lty=2) #99 % quantile
#(4) Distribution of Maximum speed (R3)
par(fig = c(0.5, 1, 0, 0.5), new = T)
h = hist(df.sub$Maximum.speed, breaks="Scott", plot=TRUE, main = "Maximum speed (m/s)",
xlab = "Maximum speed (m/s) [R3]", ylab = "Density", cex.lab = 1.2,  freq = FALSE)
text(Max.speed, max(h$density), labels = paste("R3 =", Max.speed), col = "blue", cex = 0.8) # User defined 'Max.speed [R3]'
text(quantile(df.sub$Maximum.speed, 0.95, na.rm = TRUE), max(h$density)/1.7, labels = "95%", col = "green", cex = 0.8) # 95%
text(quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE), max(h$density)/3.2, labels = "99%", col = "red", cex = 0.8) # 99%
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density) - max(h$density)/10)
abline(v = Max.speed, col="blue", lwd=1.5, lty=2) # User defined 'Dist.thresh [R1]'
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/2)
abline(v = quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.95, na.rm = TRUE), col="green", lwd=1.5, lty=2) #95% quantile
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/4)
abline(v = quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.99, na.rm = TRUE), col="red", lwd=1.5, lty=2) #99 % quantile
#Zoom in
par(fig = c(0.7, 0.99, 0.15, 0.49), new = T)
h = hist(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), breaks="Scott", plot=TRUE, main = "",
xlab = "", ylab = "", freq = FALSE, xlim = c(0, quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE)))
if(Max.speed < quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE)){
text(Max.speed, max(h$density), labels = paste("R3 =", Max.speed), col = "blue", cex = 0.8) # User defined 'Angle.speed [R2]'
}
text(quantile(df.sub$Maximum.speed, 0.95, na.rm = TRUE), max(h$density)/1.7, labels = "95%", col = "green", cex = 0.8) # 95%
text(quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE), max(h$density)/3.2, labels = "99%", col = "red", cex = 0.8) # 99%
if(Max.speed < quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE)){
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density) - max(h$density)/10)
abline(v = Angle.speed, col="blue", lwd=1.5, lty=2) # User defined 'Dist.thresh [R1]'
}
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/2)
abline(v = quantile(df.sub$Maximum.speed, 0.95, na.rm = TRUE), col="green", lwd=1.5, lty=2) #95% quantile
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/4)
abline(v = quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE), col="red", lwd=1.5, lty=2) #99 % quantile
Thresholds <- recordPlot() #Save plot
###ggplot Results of filtering (user-defined thresholds)###
p1 = ggplot(df.sub, aes(x = Longitude, y = Latitude,
text =  paste('Timestamp: ', Timestamp,
'</br> Fix number: ', Fix.number,
'</br> Window group: ', Window.group,
'</br> Distance from median (m): ', round(Dist.from.median, 1),
'</br> Angle between 3 fixes (°): ', round(Ang.vertex, 1),
'</br> Outgoing speed of 3 fixes (m/s): ', round(Outgoing.speed, 2),
'</br> Incoming speed of 3 fixes (m/s): ', round(Incoming.speed, 2),
'</br> Maximum speed (m/s): ', round(Maximum.speed, 2),
'</br> R1: ', R1,
'</br> R2: ', R2,
'</br> R3: ', R3)))+
geom_path(aes(group=1), size = 0.3,  alpha = 0.5, color = "grey30")+
geom_point(aes(color = Verdict), alpha = 0.8)+
ggtitle("Gundog GPS filter")+
xlab("Longitude")+
ylab("Latitude")+
scale_color_manual(name = "Outlier detection:",
labels = c("Not anomalous" ,"Possible outlier", "Unanimous outlier"),
values = c("green", "darkorange2" ,"red"),
na.translate = FALSE,
drop = FALSE)+
coord_equal(ratio = 1) + #+ scale_x_continuous(labels=scaleFUN)+scale_y_continuous(labels=scaleFUN)
theme_bw()+
theme(axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(color = "black", size = 16),
axis.title.y = element_text(color = "black", size = 16),
plot.title = element_text(hjust = 0.5),
legend.position = "none")
###ggplot Results of filtering (Isolation forest)####
p2 = ggplot(df.sub, aes(x = Longitude, y = Latitude,
text =  paste('Timestamp: ', Timestamp,
'</br> Fix number: ', Fix.number,
'</br> Window group: ', Window.group,
'</br> Distance from median (m): ', round(Dist.from.median, 1),
'</br> Angle between 3 fixes (°): ', round(Ang.vertex, 1),
'</br> Outgoing speed of 3 fixes (m/s): ', round(Outgoing.speed, 2),
'</br> Incoming speed of 3 fixes (m/s): ', round(Incoming.speed, 2),
'</br> Maximum speed (m/s): ', round(Maximum.speed, 2),
'</br> I.F_anomaly_score_R1: ', round(I.F_anomaly_score_R1, 2),
'</br> I.F_anomaly_score_R2: ', round(I.F_anomaly_score_R2, 2),
'</br> I.F_anomaly_score_R3: ', round(I.F_anomaly_score_R3, 2))))+
geom_path(aes(group=1), size = 0.3,  alpha = 0.5, color = "grey30")+
geom_point(aes(color = Verdict_IF), alpha = 0.8)+
ggtitle("Gundog GPS filter")+
xlab("Longitude")+
ylab("Latitude")+
scale_color_manual(name = "Outlier detection:",
labels = c("Not anomalous" ,"Possible outlier", "Unanimous outlier"),
values = c("green", "darkorange2" ,"red"),
na.translate = FALSE,
drop = FALSE)+
coord_equal(ratio = 1) + #+ scale_x_continuous(labels=scaleFUN)+scale_y_continuous(labels=scaleFUN)
theme_bw()+
theme(axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(color = "black", size = 16),
axis.title.y = element_text(color = "black", size = 16),
plot.title = element_text(hjust = 0.5),
legend.position = "none")
#Make Interactive and plot user-defined, and Isolation Forests results side-by-side
fig <- subplot(ggplotly(p1), ggplotly(p2))
#Add sub headings
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "User-defined threholds",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "Isolation forest",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
))
fig <- fig %>%layout(annotations = annotations)
print(fig)
return(list(Thresholds = Thresholds, Plot = fig, df = as.data.frame(df.sub)))
par(mfrow = c(1,1)) #Return plotting parameters back
}else{ return(df = as.data.frame(df.sub))
} #If no plotting, just return the data frame
}
#END OF FUNCTION
#For example.... (assuming original GPS data set is called 'Drogon')
#df.sub = Gundog.GPS.Filter(TS = Drogon$study.local.timestamp, Longitude = Drogon$location.long, Latitude = Drogon$location.lat, Drop.out = 300, Window.length = 10, Burst.method = "median", Dist.thresh = 50, Max.speed = 0.85, Speed.step = 1, Angle.speed = 0.85, Angle.thresh = 30, plot = TRUE, I.F_conf = 0.995)
#And to recover the data frame from the returned list...
#GPS.df = df.sub[["df"]]
# Loop through all birds 🐢🐢
speed_filt <- data.frame()
for(i in 1:length(birds)){
subset <- filter(data_dupfilt, id == birds[i])
temp <- Gundog.GPS.Filter(
TS = subset$DateTime,
Longitude = subset$lon,
Latitude = subset$lat,
Drop.out = 600, # grouping window
Burst.method = "none",
Dist.thresh = 714, #m - max distance per time window
Angle.speed = 1.07, #m/s
Angle.thresh = 30,
Max.speed = 1.19, #m/s
Speed.step = 1, # number of fixes to calculate speed
plot = FALSE # to get just dataframe output, otherwise TRUE for list including plots
) %>%
rename(DateTime = Timestamp) %>%
left_join(subset)
speed_filt <- rbind(speed_filt, temp)
print(paste("Completed processing for", as.character(birds[i])))
}; beep()
# Save to file - flagged outliers
write.csv(speed_filt, "Processed/GPSdata_flagged.csv", row.names = FALSE)
# Background map MR zones 1 and 2
map_z13 <- get_map(c(144.4380, -37.9000), zoom=13, maptype = "satellite")
# Plot filtering by bird
ggplot()+
geom_path(data=speed_filt, aes(Longitude, Latitude), colour = "blue")+
geom_point(data=filter(speed_filt, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "orange")+
geom_point(data=filter(speed_filt, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "yellow")+
geom_point(data=filter(speed_filt, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue")+
facet_wrap(~id) +
theme_void()
1030753-1026124
4629/1030753*100
# Plot filtering by bird
ggplot()+
geom_path(data=speed_filt, aes(Longitude, Latitude), colour = "blue")+
geom_point(data=filter(speed_filt, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple")+
geom_point(data=filter(speed_filt, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red")+
geom_point(data=filter(speed_filt, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "black")+
facet_wrap(~id) +
theme_void()
# Plot filtering by bird
ggplot()+
geom_path(data=speed_filt, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(speed_filt, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple")+
geom_point(data=filter(speed_filt, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red")+
geom_point(data=filter(speed_filt, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "black")+
facet_wrap(~id) +
theme_void()
unique(speed_filt$id)
# Save to file - smaller version with minimal columns and removed outliers
speed_filt2 <- speed_filt %>%
filter(Verdict_IF == "Not anomalous") %>%
select(c("id", "timestamp", "study_local_timestamp", "lon", "lat", "acceleration_raw_x", "acceleration_raw_y", "acceleration_raw_z", "external_temperature", "height_above_msl", "utm_easting", "utm_northing", "utm_zone", "ground_speed", "heading"))
write.csv(speed_filt2, "Processed/GPSdata_filtered.csv", row.names = FALSE)
nrow(speed_filt2)
1030753-1016434
14319/1030753*100
# Bird list excluding Daisy (returned to captivity) & Star (disease fate)
birds <- c("Briar", "Nutmeg", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover",
"Prem", "Rove", "Valentine", "Marmalade", "Wobbles")
# Read in unfiltered data and remove outliers
data <- read_csv("Processed/GPSdata_filtered.csv") %>%
mutate(datetime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(datetime))
# Median smoothing by bird
smooth <- data.frame()
for(i in 1:length(birds)){
subset <- filter(data, id == birds[i])
temp <- atl_median_smooth(data = subset, x = "lat", y = "lon",
time = "datetime", moving_window = 3)
smooth <- rbind(smooth, temp)
}; beep()
unique(smooth$id)
# Plot smoothed tracks by bird
ggplot()+
geom_path(data = smooth, aes(lon, lat))+
scale_colour_viridis_d()+
theme_void()+
facet_wrap(~id)
# Save to file
write.csv(smooth, "Processed/GPSdata_smoothed.csv", row.names = FALSE)
# Marmalade
marma <- subset(smooth, id == "Marmalade") %>%
filter(lon < 144.445)
# Nutmeg
nutmeg <- subset(smooth, id == "Nutmeg") %>%
filter(lat < -37.8915)
# Briar
briar <- subset(smooth, id == "Briar") %>%
filter(lon < 144.448) %>%
filter(lat < -37.892 | lon < 144.42) %>%
filter(lon > 144.439 | lat < -37.894)
# Koda
koda <- subset(smooth, id == "Koda") %>%
filter(lat < -37.892 & lon < 144.444) %>%
filter(lat > -37.91)
# Prem
prem <- subset(smooth, id == "Prem") %>%
filter(lat < -37.893) %>%
filter(lon > 144.430 | lat < -37.897) %>%
filter(lon < 144.442 | lat > -37.901)
# Robin
robin <- subset(smooth, id == "Robin") %>%
filter(lat < -37.892) %>%
filter(lon < 144.448 | lat < -37.895) %>%
filter(lon > 144.438 | lat < -37.894) %>%
filter(lon > 144.429 | lat < -37.901) %>%
filter(lon > 144.425)
# Replace the 4 birds above in the smooth data
smooth2 <- smooth %>%
filter(!id %in% c("Marmalade", "Nutmeg", "Briar", "Koda", "Prem", "Robin")) %>%
rbind(marma, nutmeg, briar, koda, prem, robin)
nrow(smooth)
nrow(smooth2)
1016434-1015862
572/1016434
0.0005627517*100
# Write out cleaned data
write.csv(smooth2, "Processed/GPSdata_clean.csv", row.names = FALSE)
# Plot cleaned tracks by bird
ggplot()+
geom_path(data = smooth2, aes(lon, lat))+
scale_colour_viridis_d()+
theme_void()+
facet_wrap(~id)
1034948 - 1015862
19086/1034948*100
