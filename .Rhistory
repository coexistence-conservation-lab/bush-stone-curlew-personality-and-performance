# Loop through distance per day per bird üê¢
dates <- unique(data$date)
dist <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
t <-  track$data[[i]] %>%
mutate(date = date(t_)) %>%
filter(date==dates[j])
if (nrow(t)<2){
next
}
out <- data.frame(dist= cum_dist(t)/1000,
bird = track$id[[i]],
date = dates[j])
print(out)
dist <- rbind.data.frame(dist, out)
}}; beep()
# Plot distance moved per day, smoothed and coloured by individual
ggplot(dist)+
geom_smooth(aes(date, dist, group = bird, color=bird))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
# Add release group information
group <- data.frame(
bird = c("Aurora", "Robin", "Briar", "Nutmeg", "Star",
"Iona", "Sage", "Koda",
"Prem", "Rove", "Brook", "Clover", "Wobbles", "Valentine", "Marmalade"),
release = c(rep("October",5), rep("December",3), rep("January",7)))
dist <- left_join(dist, group)
# Plot distance moved per day, smoothed & coloured by release group
ggplot(dist)+
geom_smooth(aes(date, dist, group = bird, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))
# and as an average over the study period
dist_summary <- dist %>%
group_by(bird) %>%
summarise(mean_daily_dist = mean(dist))
# save results
write.csv(dist, "Output/distance_daily.csv", row.names = FALSE)
write.csv(dist_summary, "Output/distance_daily_mean.csv", row.names = FALSE)
# Convert GPS fixes to spatial points data frame
locs <- SpatialPointsDataFrame(coordinates(
cbind(data$utm_easting, data$utm_northing)),
data = dplyr::select(data, id))
# calculate home range
## 90% kud
hr_90 <-  kernelUD(locs, h="href", grid=200) %>%
getverticeshr(percent = 90); beep()
## 50% kud
hr_50 <-  kernelUD(locs, h="href", grid=200) %>%
getverticeshr(percent = 50); beep()
# transform to latlon
## 90% kud
proj4string(hr_90) <- CRS("EPSG:32755") #set crs
hr_90ll <- spTransform(hr_90, CRS("EPSG:4326")) %>% #transform to lat lon
st_as_sf()
## 50% kud
proj4string(hr_50) <- CRS("EPSG:32755") #set crs
hr_50ll <- spTransform(hr_50, CRS("EPSG:4326")) %>% #transform to lat lon
st_as_sf()
# plot map
## 90% kud
ggmap(map_z15)+
geom_sf(data=hr_90ll, aes(fill=id), alpha = .7, inherit.aes = FALSE) +
scale_fill_viridis_d()
# Google API key for ggmaps
ggmap::register_google(key = "AIzaSyAH3qnqmxDATEluG8lKt2KtnHKLYJc2WaM")
# Background map Orana zones 1 and 2
map_z13 <- get_map(c(144.4360, -37.9000), zoom=13, maptype = "satellite")
map_z15 <- get_map(c(144.4360, -37.9000), zoom=15, maptype = "satellite")
# plot map
## 90% kud
ggmap(map_z15)+
geom_sf(data=hr_90ll, aes(fill=id), alpha = .7, inherit.aes = FALSE) +
scale_fill_viridis_d()
## 50% kud
ggmap(map_z15)+
geom_sf(data=hr_50ll, aes(fill=id), alpha = .7, inherit.aes = FALSE) +
scale_fill_viridis_d()
# save results
hr <- data.frame(bird = hr_90@data$id,
kud90 = hr_90@data$area,
kud50 = hr_50@data$area)
write.csv(hr, "Output/hr_area.csv", row.names = FALSE)
# loop through birds and days for 90% KUD üê¢üê¢
days <- unique(locs[["date"]])
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = days[j])
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
# loop through birds and days for 90% KUD üê¢üê¢
dates <- unique(data$date)
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == dates[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = days[j])
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
# convert GPS fixes to spatial points data frame
locs <- SpatialPointsDataFrame(coordinates(
cbind(data$utm_easting, data$utm_northing)),
data = data)
# loop through birds and days for 90% KUD üê¢üê¢
dates <- unique(data$date)
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == dates[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = days[j])
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
# extract area per day
hr_area <- st_drop_geometry(hr_daily)
write.csv(hr_area, "Output/hr_daily_area.csv", row.names = FALSE)
head(hr_area)
# loop through birds and days for 90% KUD üê¢üê¢
dates <- unique(loces$date)
# loop through birds and days for 90% KUD üê¢üê¢
dates <- unique(locs$date)
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
points <- subset(locs, id == birds[i] & date == dates[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = days[j])
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
# extract area per day
hr_area <- st_drop_geometry(hr_daily)
# Save to file
write.csv(hr_area, "Output/hr_daily_area.csv", row.names = FALSE)
head(hr_area)
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_area)+
geom_smooth(aes(date, area, group = bird, color=bird))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_area)+
geom_smooth(aes(date, area, group = is, color=bird))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_area)+
geom_smooth(aes(date, area, group = is, color=is))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_area)+
geom_smooth(aes(date, area, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
View(hr_daily)
head(track)
head(locs)
# read in clean data
data <- read.csv("Processed/GPSdata_filtered.csv")  %>%
mutate(DateTime = as.POSIXct(DateTime,
"%Y-%m-%d %H:%M:%S",tz = "Australia/Melbourne"),
date = as.Date(DateTime, tz = "Australia/Melbourne")) %>%
na.omit()
# convert GPS fixes to spatial points data frame
locs <- SpatialPointsDataFrame(coordinates(
cbind(data$utm_easting, data$utm_northing)),
data = data)
# loop through birds and days for 90% KUD üê¢üê¢
dates <- unique(locs$date)
# Bird list
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
points <- subset(locs, id == birds[i] & date == dates[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = dates[j])
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
View(hr_daily)
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = dates[j]) %>%
st_drop_geometry()
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
points <- subset(locs, id == birds[i] & date == dates[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = dates[j]) %>%
st_drop_geometry()
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
View(hr_daily)
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(dates)){
points <- subset(locs, id == birds[i] & date == dates[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 5) %>%
getverticeshr(percent = 90) %>%
st_as_sf() %>%
mutate(date = dates[j]) %>%
st_drop_geometry()
print(head(kud, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud)
}}; beep()
# Save to file
write.csv(hr_daily, "Output/hr_daily_area.csv", row.names = FALSE)
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_area)+
geom_smooth(aes(date, area, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_smooth(aes(date, area, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Total daily distance moved (km)")+
scale_color_viridis_d()
View(hr_daily)
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_path(aes(date, area, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_smooth(aes(date, area, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_path(aes(date, area, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_boxplot(aes(date, area, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_point(aes(date, area, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_line(aes(date, area, group = id, color=id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# Plot daily home ranges, smoothed and coloured by individual
ggplot(hr_daily)+
geom_smooth(aes(date, area, group = id, color=id), method = "lm")+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# And individual box plots
ggplot(hr_daily)+
geom_boxplot(aes(area, color = id))
# And individual box plots
ggplot(hr_daily)+
geom_boxplot(aes(id, area, color = id))
# And individual box plots
ggplot(hr_daily)+
geom_boxplot(aes(id, area, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# And individual box plots
ggplot(hr_daily)+
geom_boxplot(aes(id, area, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()
# And individual box plots
ggplot(hr_daily)+
geom_boxplot(aes(id, area, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
scale_color_viridis_d()+
theme(legend.position="none")
# And individual box plots
ggplot(hr_daily)+
geom_boxplot(aes(id, area, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_color_viridis_d()+
theme(legend.position="none")
# And individual box plots
ggplot(hr_daily)+
geom_boxplot(aes(id, area, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
theme(axis.text.x = element_text(angle = 45, vjust = 1))+
scale_color_viridis_d()+
theme(legend.position="none")
# And individual box plots
ggplot(hr_daily)+
geom_boxplot(aes(id, area, color = id))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Daily 90% KDE home range (ha)")+
theme(axis.text.x = element_text(angle = 50))+
scale_color_viridis_d()+
theme(legend.position="none")
# Load packages
pacman::p_load(adehabitatHR, amt, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor,move2, progressr, SDLfilter, segclust2d, sf, solitude, suncalc, terra, tidyverse, wildlifeDI)
latency <- readxl("bsc assay data.xlsx", sheet =2)
# Load packages
pacman::p_load(adehabitatHR, amt, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor,move2, progressr, SDLfilter, segclust2d, sf, solitude, suncalc, readxl, terra, tidyverse, wildlifeDI)
?readxl
latency <- read_excel("bsc assay data.xlsx", sheet =2)
latency <- read_excel("Input/bsc assay data.xlsx", sheet =2)
View(latency)
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3)
View(latency)
# Bird list
birds <- c("Briar", "Nutmeg", "Star", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover", "Wobbles",
"Prem", "Rove", "Valentine", "Marmalade")
View(latency)
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names()
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds)
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds)
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds)
View(latency)
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds)
View(latency)
# Read in survival data
survival <- read.csv("Input/survival.csv")
View(survival)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names()
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names()
View(survival)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names()
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds) %>%
# Convert NAs where bird didn't reach food to maximum time elapsed
mutate(latency = ifelse(is.na(latency_s), 21600, latency_S))
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds) %>%
# Convert NAs where bird didn't reach food to maximum time elapsed
mutate(latency = ifelse(is.na(latency_s), 21600, latency_s))
View(latency)
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds) %>%
# Convert NAs where bird didn't reach food to maximum time elapsed
mutate(latency = ifelse(is.na(latency_s), 21600, latency_s))
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds) %>%
# Convert NAs where bird didn't reach food to maximum time elapsed
mutate(latency = ifelse(is.na(latency_s), 21600, latency_s)) %>%
select(c("date","bird","reach","latnecy"))
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds) %>%
# Convert NAs where bird didn't reach food to maximum time elapsed
mutate(latency = ifelse(is.na(latency_s), 21600, latency_s)) %>%
select(c("date","bird","reach","latency"))
# Combine survival and latency data
m1_data <- left_join(survival, latency)
View(survival)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
select(c("identity", "persist")) %>%
rename(bird = identity)
View(survival)
# Combine survival and latency data
m1_data <- left_join(survival, latency)
View(m1_data)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
select(c("identity", "persist")) %>%
rename(bird = identity) %>%
filter(!bird=="Daisy")
# Combine survival and latency data
m1_data <- left_join(survival, latency)
View(latency)
unique(latency$date)
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
filter(bird %in% birds) %>%
filter(date %in% c("2022-10-12 UTC", "2022-10-11 UTC"))
View(survival)
