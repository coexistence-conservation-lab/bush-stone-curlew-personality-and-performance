theme_minimal()
# m4ai: does latency predict mean daily distance moved?
ggplot(m4_data, aes(dist_moved, log(latency)))+
geom_point()+
geom_smooth(method = "lm")+
theme_minimal()
m4ai <- glmmTMB(mean_dist_moved ~ latency + (1|date) + (1|bird),
data = m4_data)
m4ai <- glmmTMB(dist_moved ~ latency + (1|date) + (1|bird),
data = m4_data)
m4ai <- glmmTMB(dist_moved ~ latency + (1|date),
data = m4_data)
m4ai <- glmmTMB(latency ~ dist_moved + date,
data = m4_data)
summary(m1b)
summary(m4ai)
m4ai <- glmmTMB(latency ~ dist_moved + (1|date),
data = m4_data)
m4ai <- glmmTMB(latency ~ dist_moved + (1|bird),
data = m4_data)
summary(m4ai)
m4ai <- glmmTMB(latency ~ dist_moved + bird,
data = m4_data)
summary(m4ai)
# Read in home range data
hr_area <- read.csv("Output/hr_area.csv")
hr_slope <- read.csv("Output/hr_slope.csv")
View(hr_area)
View(hr_slope)
hr_slope <- read.csv %>%
rename(bird = id)
hr_slope <- read.csv("Output/hr_slope.csv") %>%
rename(bird = id)
# Combine
hr <- left_join(hr_area, hr_slope)
View(hr)
# Combine hr data with latency
m7_data <- left_join(hr, latency)
# Combine hr data with latency
m7_data <- left_join(hr, latency2)
View(m7_data)
names(hr)
# m7a: does latency predict 90% KUD
ggplot(m7_data, aes(kud90, log(latency)))+
geom_point()+
geom_smooth(method = "lm")+
theme_minimal()
m7a <- glmmTMB(kud90 ~ latency,
data = m1_data)
m7a <- glmmTMB(kud90 ~ latency,
data = m7_data)
summary(m7a)
# m7b: does latency predict 50% KUD
ggplot(m7_data, aes(kud50, log(latency)))+
geom_point()+
geom_smooth(method = "lm")+
theme_minimal()
m7b <- glmmTMB(kud50 ~ latency,
data = m7_data)
summary(m7b)
# m7b: does latency predict change in HR?
ggplot(m7_data, aes(slope, log(latency)))+
geom_point()+
geom_smooth(method = "lm")+
theme_minimal()
m7c <- glmmTMB(slope ~ latency,
data = m7_data)
summary(m7c)
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "to_90", "to_360")) %>%
left_join(latency)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
# Limit persistence value to minimum common tracked time of 360
mutate(persist = ifelse(persist>360, 360, persist))
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "to_90", "to_360")) %>%
left_join(latency)
View(m1_data)
head(dist_day)
# Read data
dist_day <- read.csv("Output/distance_release.csv")
head(dist_day)
# Read data
dist_day <- read.csv("Output/distance_release.csv") %>%
mutate(date = as_date(date))
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, pscl, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Read data
dist_day <- read.csv("Output/distance_release.csv") %>%
mutate(date = as_date(date))
head(dist_day)
# Plot average distance from release site per day, smoothed & coloured by release group
ggplot(dist_day)+
geom_smooth(aes(date, mean, group = id, color = release))+
theme_minimal()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_date(date_labels = "%b %Y", breaks = "1 month")+
labs(x= element_blank(), y = "Mean daily distance from release location (m)")+
scale_color_manual(values = c("#881C00FF","#1BB6AFFF","#172869FF"))+
theme(axis.text.x = element_text(angle = 90))
# read data
hr_daily <- read.csv("Output/hr_daily_area.csv" )%>%
mutate(date = as_date(date))
View(hr_daily)
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, pscl, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Bird list excluding Daisy (returned to captivity) & Star (disease fate)
birds <- c("Briar", "Nutmeg", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover",
"Prem", "Rove", "Valentine", "Marmalade", "Wobbles")
# Read in clean data
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(datetime)); beep()
# All bird combinations
list <-combinations(n = 14, r = 2, v = 1:14, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Set up data in move2 format for wildlifeDI
data_move <- mt_as_move2(data,
time_column = "DateTime",
track_id_column = "id",
coords =  c("utm_easting", "utm_northing")) %>%
sf::st_set_crs("EPSG:32755")
names(data)
# Set up data in move2 format for wildlifeDI
data_move <- mt_as_move2(data,
time_column = "datetime",
track_id_column = "id",
coords =  c("utm_easting", "utm_northing")) %>%
sf::st_set_crs("EPSG:32755")
# Test subset 2 birds
checkTO(data_move)
# Read in clean data in move2 format for wildlifeDI
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(datetime)) %>%
mt_as_move2(time_column = "datetime",
track_id_column = "id",
coords =  c("utm_easting", "utm_northing")) %>%
sf::st_set_crs("EPSG:32755")
# Test subset 2 birds
checkTO(data_move); beep()
# Test subset 2 birds
checkTO(data); beep()
# Test subset 2 birds
test1 <- subset(data, id=="Brook")
test2 <- subset(data, id=="Rowan")
checkTO(test1, test2)
test2 <- subset(data, id=="Marmaladw")
test2 <- subset(data, id=="Marmalade")
checkTO(test1, test2)
head(test1)
head(test2)
View(test1)
View(data)
# Read in clean data in move2 format for wildlifeDI
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(study_local_timestamp,
"%Y-%m-%d %H:%M:%S")) %>%
mt_as_move2(time_column = "datetime",
track_id_column = "id",
coords =  c("utm_easting", "utm_northing")) %>%
sf::st_set_crs("EPSG:32755"); beep()
head(data)
str(data)
?as.POSIXct
# Read in clean data in move2 format for wildlifeDI
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(study_local_timestamp,
format = "%Y-%m-%d %H:%M:%S")) %>%
mt_as_move2(time_column = "datetime",
track_id_column = "id",
coords =  c("utm_easting", "utm_northing")) %>%
sf::st_set_crs("EPSG:32755"); beep()
head(data)
str(data)
# Test subset 2 birds
test1 <- subset(data, id=="Brook")
test2 <- subset(data, id=="Marmalade")
checkTO(test1, test2)
?checkTO
checkTO(data)
head(test1)
head(test2)
min(test1$datetime)
min(test2$datetime)
max(test2$datetime)
max(test1$datetime)
str(data)
mt_time(test1)
mt_time(test2)
checkTO(test1, test2)
str(test1)
select(c(datetime, utm_easting, utm_northing, id)
))))
# Read in clean data in move2 format for wildlifeDI
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(study_local_timestamp,
format = "%Y-%m-%d %H:%M:%S")) %>%
select(c(datetime, utm_easting, utm_northing, id))
head(data)
str(data)
# Read in clean data in move2 format for wildlifeDI
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(study_local_timestamp,
format = "%Y-%m-%d %H:%M:%S")) %>%
select(c(datetime, utm_easting, utm_northing, id)) %>%
mt_as_move2(time_column = "datetime",
track_id_column = "id",
coords =  c("utm_easting", "utm_northing")) %>%
sf::st_set_crs("EPSG:32755"); beep()
unique(mt_track_id(data))
# Test subset 2 birds
test1 <- subset(data, id=="Brook")
test2 <- subset(data, id=="Marmalade")
checkTO(test1, test2)
# Test subset 2 birds
test1 <- subset(data, id=="Aurora")
test2 <- subset(data, id=="Robin")
checkTO(test1, test2)
checkTO(data); beep()
is.na(data)
View(data)
View(data)
# Read in clean data in move2 format for wildlifeDI
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(study_local_timestamp,
format = "%Y-%m-%d %H:%M:%S")) %>%
select(c(datetime, utm_easting, utm_northing, id)) %>%
na.omit() %>%
mt_as_move2(time_column = "datetime",
track_id_column = "id",
coords =  c("utm_easting", "utm_northing")) %>%
sf::st_set_crs("EPSG:32755"); beep()
unique(mt_track_id(data))
# Test subset 2 birds
test1 <- subset(data, id=="Aurora")
test2 <- subset(data, id=="Robin")
checkTO(data); beep()
# Test subset 2 birds
test1 <- subset(data, id=="Aurora")
test2 <- subset(data, id=="Robin")
checkTO(test1, test2)
# Test subset 2 birds
test1 <- subset(data, id=="Aurora")
test2 <- subset(data, id=="Robin")
checkTO(test1, test2)
# Read in clean data in move2 format for wildlifeDI
data <- read.csv("Processed/GPSdata_clean.csv") %>%
mutate(datetime = as.POSIXct(study_local_timestamp,
format = "%Y-%m-%d %H:%M:%S")) %>%
select(c(datetime, utm_easting, utm_northing, id)) %>%
na.omit() %>%
mt_as_move2(time_column = "datetime",
track_id_column = "id",
coords =  c("utm_easting", "utm_northing")) %>%
sf::st_set_crs("EPSG:32755"); beep()
# Issue with Nutmeg?
nutmeg <- subset(data, id=="Nutmeg")
str(nutmeg)
max(nutmeg$datetime)
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, pscl, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
m1ai <- glmmTMB(to_90 ~ scale(latency),
data = m1_data,
family = binomial)
# Read in and clean up latency assay data
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
# Select study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-12", "2022-10-11")) %>%
select(c("date", "bird", "reach", "latency_s")) %>%
# Convert yes/no to 1/0
mutate(reach = ifelse(reach == "Yes", 1, 0)) %>%
rename(latency = latency_s) %>%
# Add column for plotting 'did not reach'
mutate(label = ifelse(is.na(latency), "DNR", "")) %>%
# Convert latency NAs to zeros
mutate(latency = ifelse(is.na(latency), 0, latency))
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
# Limit persistence value to minimum common tracked time of 360
mutate(persist = ifelse(persist>360, 360, persist))
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "to_90", "to_360")) %>%
left_join(latency)
# Bird list excluding Daisy (returned to captivity) & Star (disease fate)
birds <- c("Briar", "Nutmeg", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover",
"Prem", "Rove", "Valentine", "Marmalade", "Wobbles")
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
# Limit persistence value to minimum common tracked time of 360
mutate(persist = ifelse(persist>360, 360, persist))
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "to_90", "to_360")) %>%
left_join(latency)
# Read in and clean up latency assay data
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
# Select study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-12", "2022-10-11")) %>%
select(c("date", "bird", "reach", "latency_s")) %>%
# Convert yes/no to 1/0
mutate(reach = ifelse(reach == "Yes", 1, 0)) %>%
rename(latency = latency_s) %>%
# Add column for plotting 'did not reach'
mutate(label = ifelse(is.na(latency), "DNR", "")) %>%
# Convert latency NAs to zeros
mutate(latency = ifelse(is.na(latency), 0, latency))
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "to_90", "to_360")) %>%
left_join(latency)
# Drop DNRs
m1_data <- filter(m1_data, !label == "DNR")
m1ai <- glmmTMB(to_90 ~ scale(latency),
data = m1_data,
family = binomial)
summary(m1ai)
m1ai <- glmmTMB(to_90 ~ scale(log(latency)),
data = m1_data,
family = binomial)
summary(m1ai)
check_model(m1ai)
qqggplot(m1ai)
library(ggpubr)
qqggplot(m1ai)
m1ai <- glmmTMB(to_90 ~ scale((latency)),
data = m1_data,
family = binomial)
summary(m1ai)
check_model(m1ai)
m1aii <- glmmTMB(to_360 ~ scale(log(latency)),
data = m1_data,
family = binomial)
summary(m1aii)
check_model(m1aii)
m1b <- glmmTMB(persist ~ scale(log(latency)),
data = m1_data,
family = nbinom2(link = "log"))
summary(m1b)
m1b <- glmmTMB(persist ~ scale((latency)),
data = m1_data,
family = nbinom2(link = "log"))
summary(m1b)
check_model(m1b)
hist(m1_data$persist)
m1b <- glmmTMB(persist ~ scale((latency)),
data = m1_data)
summary(m1b)
check_model(m1b)
m1b <- glmmTMB(persist ~ scale(log(latency)),
data = m1_data)
summary(m1b)
check_model(m1b)
m1b <- glmmTMB(persist ~ scale(log(latency)) + bird,
data = m1_data)
summary(m1b)
check_model(m1b)
m1b <- glmmTMB(persist ~ scale(log(latency)) + (1|bird),
data = m1_data)
summary(m1b)
check_model(m1b)
hist(m1_data$persist)
hist(log(m1_data$persist))
# Add every day for survival
birds2 <- setdiff(birds, c("Daisy", "Star"))
survival2 <- data.frame()
for(i in 1:length(birds2)){
temp <- subset(survival, bird == birds2[i])
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds2[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
survival2 <- rbind(survival2, temp2)
}
temp <- subset(survival, bird == birds2[i])
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds2[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
survival2 <- rbind(survival2, temp2)
View(survival)
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date))
?as_date
head(survival)
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"))
View(temp)
# Add every day for survival
birds2 <- setdiff(birds, c("Daisy", "Star"))
survival2 <- data.frame()
for(i in 1:length(birds2)){
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"))
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds2[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
survival2 <- rbind(survival2, temp2)
}
# Plot hazard rate
plot(survfit(Surv(time, status) ~ 1, data = survival2))
View(survival2)
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y"))
# Add every day for survival
birds2 <- setdiff(birds, c("Daisy", "Star"))
survival2 <- data.frame()
for(i in 1:length(birds2)){
temp <- subset(survival, bird == birds2[i]) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y"))
temp2 <- data.frame(date = as_date(temp$start_date:as_date("2024-01-10"))) %>%
mutate(bird = birds2[i],
status = ifelse(date<temp$end_date, 1, 0),
# Convert dates to numeric for use in Surv()
time = date - as_date(temp$start_date))
survival2 <- rbind(survival2, temp2)
}
# Plot hazard rate
plot(survfit(Surv(time, status) ~ 1, data = survival2))
summary(survfit(Surv(time, status) ~ 1, data = survival2))
coxph(survfit(Surv(time, status) ~ 1, data = survival2))
coxph((Surv(time, status) ~ 1, data = survival2))
?coxph
coxph(Surv(time, status) ~ 1, data = survival2)
test <- coxph(Surv(time, status) ~ 1, data = survival2)
summary(test)
View(test)
plot(test)
plot(survfit(test))
View(survival2)
View(survival)
View(survival2)
survival3 <- left_join(survival2, latency)
survival3 <- left_join(survival2, latency, by = "bird")
survival3 <- survival2 %>%
select(!date) %>%
left_join(latency, by = "bird")
survival3 <- latency %>%
select(!date)
survival3 <- latency %>%
select(!date) %>%
left_join(survival2, by = "bird")
survival3 <- latency %>%
select(!date) %>%
right_join(survival2, by = "bird")
View(survival3)
# Playing with alt latency scores
latency2 <- latency %>% group_by(bird) %>%
summarise(latency = mean(latency))
View(latency2)
survival3 <- left_join(survival2, latency)
survival3 <- left_join(survival2, latency2)
View(survival3)
test <- coxph(Surv(time, status) ~ latency, data = survival2)
test <- coxph(Surv(time, status) ~ latency, data = survival3)
summary(test)
plot(survfit(test))
test <- coxph(Surv(time, status) ~ scale(latency), data = survival3)
summary(test)
plot(survfit(test))
# Read in handling data
handling <- read_excel("Input/bsc assay data.xlsx", sheet = 7) %>%
clean_names() %>%
rename(bird = identity) %>%
# Filter to study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-20"))
View(handling)
names(handling)
survival3 <- left_join(survival2, latency2) %>%
left_join(select(handling, c(bird, score)))
View(survival3)
survival3 <- left_join(survival2, latency2) %>%
left_join(select(handling, c(bird, score))) %>%
mutate(score = as_factor(score))
test <- coxph(Surv(time, status) ~ scale(latency) + score, data = survival3)
summary(test)
plot(survfit(test))
plot((test))
librar(sjplot)
library(sjplot)
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, pscl, SDLfilter, segclust2d, sf, sjPlot, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
beep()
beep('coin')
beep()
print("hello"); beep()
plot_model(test)
plot_model(test, type = "pred")
