summarise(z = sum(grepl("Z", behaviour)),
L = length(behaviour) - z,
v = sum(vigilant),
pv = v/L)
View(vigilance)
# Plot proportion of time spent vigilant by bird
ggplot(vigilance) +
geom_bar(aes(bird, pv), position = "dodge", stat = "identity")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Proportion of time spent vigilant")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
theme_minimal()
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
mutate(start_date = as_date(start_date, format = "%d/%m/%Y"),
end_date = as_date(end_date, format = "%d/%m/%Y"),
survived = ifelse(persist<360, 0, 1),
persist = ifelse(persist>360, 360, persist))
View(survival)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds)
View(survival)
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "survived")) %>%
left_join(latency)
# Combine survival and latency data
m1_data <- survival %>%
select(c("bird", "persist", "to_90", "to_360")) %>%
left_join(latency)
mosaicplot(table(m1_data$to_90, m1_data$reach))
# Survived to 360 days
mosaicplot(table(m1_data$to_360, m1_data$reach))
# m1ai: Does latency to reach food predict survival? To 90 days.
ggplot(m1_data)+
geom_boxplot(aes(x= to_90, y=log(latency), group=to_90))+
theme_minimal()
# m1aii: Does latency to reach food predict survival? To 90 days.
ggplot(m1_data)+
geom_boxplot(aes(x= to_360, y=log(latency), group=to_360))+
theme_minimal()
# m1ai: Does latency to reach food predict survival? To 90 days.
ggplot(m1_data)+
geom_boxplot(aes(x= to_90, y=(latency), group=to_90))+
theme_minimal()
# m1aii: Does latency to reach food predict survival? To 90 days.
ggplot(m1_data)+
geom_boxplot(aes(x= to_360, y=(latency), group=to_360))+
theme_minimal()
# m1ai: Does latency to reach food predict survival? To 90 days.
ggplot(m1_data)+
geom_boxplot(aes(x= to_90, y=log(latency), group=to_90))+
theme_minimal()
# m1aii: Does latency to reach food predict survival? To 90 days.
ggplot(m1_data)+
geom_boxplot(aes(x= to_360, y=log(latency), group=to_360))+
theme_minimal()
# Drop DNRs
m1_data <- filter(!label = "DNR")
# Drop DNRs
m1_data <- filter(!label == "DNR")
View(m1_data)
# Drop DNRs
m1_data <- filter(m1_data, !label == "DNR")
# m1ai: Does latency to reach food predict survival? To 90 days.
ggplot(m1_data)+
geom_boxplot(aes(x= to_90, y=log(latency), group=to_90))+
theme_minimal()
# m1aii: Does latency to reach food predict survival? To 90 days.
ggplot(m1_data)+
geom_boxplot(aes(x= to_360, y=log(latency), group=to_360))+
theme_minimal()
m1ai <- glmmTMB(survived ~ latency,
data = m1_data,
family = binomial)
m1ai <- glmmTMB(to_90 ~ latency,
data = m1_data,
family = binomial)
summary(m1ai)
m1aii <- glmmTMB(to_360 ~ latency,
data = m1_data,
family = binomial)
summary(m1aii)
m1ai1 <- glmmTMB(to_90 ~ reach,
data = m1_data,
family = binomial)
summary(m1ai)
# Calculate change in home range over time
daily_hr <- read.csv("Output/hr_daily_area.csv")
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, pscl, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
m1ai <- hurdle(latency ~ to_90, data = m1_data)
m1ai <- hurdle(to_90 ~ latency, data = m1_data)
m1ai
summary(m1ai)
View(daily_hr)
# Read in daily hr data
daily_hr <- read.csv("Output/hr_daily_area.csv") %>%
mutate(date = as_date(date))
View(m1_data)
View(daily_hr)
subset <- subset(daily_hr, id == "Briar")
View(daily_hr)
slope <- lm(area ~ date, data = subset)
slope <- lm(area ~ date, data = subset) %>%
coeff()
slope <- lm(area ~ date, data = subset) %>%
coef()
slope <- lm(area ~ date, data = subset) %>%
coef() %>%
select(2)
slope
slope <- lm(area ~ date, data = subset) %>%
coef() %>%
as.data.frame()
View(slope)
?as.data.frame
slope <- lm(area ~ date, data = subset) %>%
coef() %>%
as.data.frame(make.names = FALSE)
View(slope)
slope <- lm(area ~ date, data = subset) %>%
coef() %>%
as.data.frame(row.names = NULL)
View(slope)
slope <- lm(area ~ date, data = subset) %>%
coef()[2]
slope <- lm(area ~ date, data = subset) %>%
coef()
out <- data.frame(id = subset$id,
slope = slope[2])
View(out)
out <- data.frame(id = "Briar",
slope = slope[2])
View(out)
# Extract slope coefficient from lm per bird
hr_slope <- data.frame()
for(i in 1:length(birds)){
subset <- subset(daily_hr, id == "Briar")
slope <- lm(area ~ date, data = subset) %>%
coef()
out <- data.frame(id = "Briar",
slope = slope[2])
hr_slope <- rbind(hr_slope, out)
}
View(hr_slope)
# Extract slope coefficient from lm per bird
hr_slope <- data.frame()
for(i in 1:length(birds)){
subset <- subset(daily_hr, id == birds[i])
slope <- lm(area ~ date, data = subset) %>%
coef()
out <- data.frame(id = birds[i],
slope = slope[2])
hr_slope <- rbind(hr_slope, out)
}
View(hr_slope)
# Read in daily hr data
daily_hr <- read.csv("Output/hr_daily_area.csv") %>%
mutate(date = as_numeric(date))
# Read in daily hr data
daily_hr <- read.csv("Output/hr_daily_area.csv") %>%
mutate(date = as.numeric(date))
View(daily_hr)
# Read in daily hr data
daily_hr <- read.csv("Output/hr_daily_area.csv") %>%
mutate(date = as.numeric(as_date(date)))
View(daily_hr)
# Extract slope coefficient from lm per bird
hr_slope <- data.frame()
for(i in 1:length(birds)){
subset <- subset(daily_hr, id == birds[i])
slope <- lm(area ~ date, data = subset) %>%
coef()
out <- data.frame(id = birds[i],
slope = slope[2])
hr_slope <- rbind(hr_slope, out)
}
View(hr_slope)
# Save to file
write.csv(hr_slope, "Output/hr_slope.csv", row.names = FALSE)
# Read in home range data
hr <- read.csv("Output/hr_area.csv")
hr_slope <- read.csv("Output/hr_slope.csv")
# Combine
responses <- left_join(survival, dist_daily)
# Read in survival & persistence data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds)
# Read in distance data
dist_daily <- read.csv("Output/distance_daily.csv")
dist_release <- read.csv("Output/distance_release.csv")
# Read in home range data
hr <- read.csv("Output/hr_area.csv")
hr_slope <- read.csv("Output/hr_slope.csv")
# Combine
responses <- left_join(survival, dist_daily)
View(responses)
View(survival)
# Read in survival & persistence data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
select(c(bird, persist, to90, to360))
# Read in survival & persistence data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
select(c(bird, persist, to_90, to_360))
View(survival)
names(hr)
names(hr_slope)
hr_slope <- read.csv("Output/hr_slope.csv") %>%
rename(bird = id)
# Combine
responses <- left_join(survival, dist_daily)
# Read in daily hr data
daily_dist <- read.csv("Output/distance_daily.csv") %>%
mutate(date = as.numeric(as_date(date)))
View(dist_daily)
# Read in daily hr data
dist_daily <- read.csv("Output/distance_daily.csv") %>%
mutate(date = as.numeric(as_date(date)))
View(dist_daily)
# Extract slope coefficient from lm per bird
dist_slope <- data.frame()
# Extract slope coefficient from lm per bird
dist_slope <- data.frame()
for(i in 1:length(birds)){
subset <- subset(dist_daily, id == birds[i])
slope <- lm(dist ~ date, data = subset) %>%
coef()
out <- data.frame(id = birds[i],
slope = slope[2])
hr_slope <- rbind(dist_slope, out)
}
# Extract slope coefficient from lm per bird
dist_slope <- data.frame()
for(i in 1:length(birds)){
subset <- subset(dist_daily, bird == birds[i])
slope <- lm(dist ~ date, data = subset) %>%
coef()
out <- data.frame(bird = birds[i],
slope = slope[2])
hr_slope <- rbind(dist_slope, out)
}
View(subset)
slope <- lm(dist ~ date, data = subset) %>%
coef()
out <- data.frame(bird = birds[i],
slope = slope[2])
hr_slope <- rbind(dist_slope, out)
# Extract slope coefficient from lm per bird
dist_slope <- data.frame()
for(i in 1:length(birds)){
subset <- subset(dist_daily, bird == birds[i])
slope <- lm(dist ~ date, data = subset) %>%
coef()
out <- data.frame(bird = birds[i],
slope = slope[2])
dist_slope <- rbind(dist_slope, out)
}
View(dist_slope)
# Save to file
write.csv(dist_slope, "Output/dist_slope.csv", row.names = FALSE)
dist_release <- read.csv("Output/distance_release.csv") %>%
mutate(date = as.numeric(as_date(date)))
dist_release <- read.csv("Output/distance_release.csv") %>%
mutate(date = as.numeric(as_date(date)))
View(dist_release)
dist_release <- read.csv("Output/distance_release.csv") %>%
mutate(date = as.numeric(as_date(date))) %>%
rename(bird == id)
dist_release <- read.csv("Output/distance_release.csv") %>%
mutate(date = as.numeric(as_date(date))) %>%
rename(bird = id)
# Extract slope coefficient from lm per bird
dist_slope <- data.frame()
for(i in 1:length(birds)){
subset1 <- subset(dist_daily, bird == birds[i])
slope1 <- lm(dist ~ date, data = subset1) %>%
coef()
subset2 <- subset(dist_release, bird == birds[i])
slope2 <- lm(dist ~ date, data = subset2) %>%
coef()
out <- data.frame(bird = birds[i],
slope_dist_moved = slope1[2],
slope_dist_release = slope2[2])
dist_slope <- rbind(dist_slope, out)
}
subset1 <- subset(dist_daily, bird == birds[i])
slope1 <- lm(dist ~ date, data = subset1) %>%
coef()
subset2 <- subset(dist_release, bird == birds[i])
slope2 <- lm(dist ~ date, data = subset2) %>%
coef()
out <- data.frame(bird = birds[i],
slope_dist_moved = slope1[2],
slope_dist_release = slope2[2])
slope2 <- lm(dist ~ date, data = subset2) %>%
coef()
slope2 <- lm(mean ~ date, data = subset2) %>%
coef()
# Extract slope coefficient from lm per bird
dist_slope <- data.frame()
for(i in 1:length(birds)){
subset1 <- subset(dist_daily, bird == birds[i])
slope1 <- lm(dist ~ date, data = subset1) %>%
coef()
subset2 <- subset(dist_release, bird == birds[i])
slope2 <- lm(mean ~ date, data = subset2) %>%
coef()
out <- data.frame(bird = birds[i],
slope_dist_moved = slope1[2],
slope_dist_release = slope2[2])
dist_slope <- rbind(dist_slope, out)
}
View(dist_slope)
# Save to file
write.csv(dist_slope, "Output/dist_slope.csv", row.names = FALSE)
# Read in distance data
dist_slope <- read.csv("Output/dist_slope.csv")
head(survival)
head(dist_slope)
head(hr)
head(hr_slope)
hr_slope <- read.csv("Output/hr_slope.csv") %>%
rename(bird = id,
hr_slope = slope)
# Combine
responses <- left_join(survival, dist_slope)
# Combine
responses <- left_join(survival, dist_slope) %>%
left_join(hr) %>%
left_join(hr_slope)
View(responses)
# Read in and clean up latency assay data
latency <- read_excel("Input/bsc assay data.xlsx", sheet =3) %>%
clean_names() %>%
# Select study birds
filter(bird %in% birds) %>%
# Filter to assay dates
filter(date %in% c("2022-10-12", "2022-10-11")) %>%
select(c("date", "bird", "reach", "latency_s")) %>%
# Convert yes/no to 1/0
mutate(reach = ifelse(reach == "Yes", 1, 0)) %>%
rename(latency = latency_s) %>%
# Add column for plotting 'did not reach'
mutate(label = ifelse(is.na(latency), "DNR", "")) %>%
# Convert latency NAs to zeros
mutate(latency = ifelse(is.na(latency), 0, latency))
View(latency)
# Plot latency by bird
ggplot(latency) +
geom_bar(aes(bird, latency, fill = as.character(date)), position = "dodge", stat = "identity")+
geom_text(aes(y=600, x= bird, label = label), angle = 90, vjust = -0.5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Latency to reach food (seconds)")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
scale_fill_manual(values = c("#881C00FF","#1BB6AFFF"), name = "Assay date")+
theme_minimal()
# Combine latency and response variables
m1_data <- left_join(latency, responses)
View(m1_data)
# Combine latency and response variables
m1_data <- left_join(latency, responses) %>%
select(!c(reach, label, date))
View(m1_data)
# Hurdle model
m1 <- hurdle(latency ~ ., data = m1_data)
# Read in survival & persistence data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
select(c(bird, persist, to_90, to_360)) %>%
# Convert true/false to 1/0
mutate(to_90, ifelse(to_90==TRUE, 1, 0))
View(survival)
# Read in survival & persistence data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
select(c(bird, persist, to_90, to_360)) %>%
# Convert true/false to 1/0
mutate(to_90 = ifelse(to_90==TRUE, 1, 0))
View(survival)
# Read in survival & persistence data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds) %>%
select(c(bird, persist, to_90, to_360)) %>%
# Convert true/false to 1/0
mutate(to_90 = ifelse(to_90==TRUE, 1, 0),
to_360 = ifelse(to_360==TRUE, 1, 0))
View(survival)
# Combine
responses <- left_join(survival, dist_slope) %>%
left_join(hr) %>%
left_join(hr_slope)
# Combine latency and response variables
m1_data <- left_join(latency, responses) %>%
select(!c(reach, label, date))
# Hurdle model
m1 <- hurdle(latency ~ ., data = m1_data)
# Hurdle model
m1 <- hurdle(latency ~ ., data = select(m1_data, !c(to_90, to_360)))
# Combine latency and response variables
m1_data <- left_join(latency, responses) %>%
select(!c(reach, label, date, bird))
# Hurdle model
m1 <- hurdle(latency ~ ., data = select(m1_data, !c(to_90, to_360)))
# Hurdle model
m1 <- hurdle(latency ~ ., data = m1_data)
summary(m1)
# Combine latency and response variables
m1_data <- left_join(latency, responses) %>%
select(!c(reach, label, date))
# Join vigilance and survival data
m3_data <- survival %>%
mutate(survived = ifelse(persist<360, 0, 1),
persist = ifelse(persist>360, 360, persist)) %>%
select(c("bird", "persist", "survived")) %>%
left_join(vigilance)
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggmap, ggpubr, glmmTMB, gtools, janitor, lme4, move2, moveHMM, progressr, performance, pscl, SDLfilter, segclust2d, sf, solitude, suncalc, survival, survminer, readr, readxl, terra, tidyterra, tidyverse, wildlifeDI)
# Bird list excluding Daisy (returned to captivity) & Star (disease fate)
birds <- c("Briar", "Nutmeg", "Aurora", "Robin",
"Iona", "Sage", "Koda", "Brook", "Clover",
"Prem", "Rove", "Valentine", "Marmalade", "Wobbles")
# Read in and tidy up video assays
video <- read_excel("Input/bsc assay data.xlsx", sheet =4) %>%
clean_names() %>%
# Drop birds not included in study
filter(!bird %in% c("Daisy", "Star")) %>%
# Drop metadata columns
select(-c("clip", "note")) %>%
# Convert from wide to long
pivot_longer(3:61, names_to = "second", values_to = "behaviour") %>%
# Convert seconds into numeric
mutate(second = as.numeric(str_remove(second, "x"))) %>%
# Assign vigilance to 1 and not to 0
mutate(vigilant = ifelse(behaviour %in% c("A","HT","HB","HBT","N","TW","D"), 1, 0)) %>%
# Drop lines without recordings (primarily for Prem and Rove who had 10 second clips)
na.omit()
# Read in and tidy up video assays
video <- read_excel("Input/bsc assay data.xlsx", sheet =4) %>%
clean_names() %>%
# Drop metadata columns
select(-c("clip", "note")) %>%
# Convert from wide to long
pivot_longer(3:61, names_to = "second", values_to = "behaviour") %>%
# Convert seconds into numeric
mutate(second = as.numeric(str_remove(second, "x"))) %>%
# Assign vigilance to 1 and not to 0
mutate(vigilant = ifelse(behaviour %in% c("A","HT","HB","HBT","N","TW","D"), 1, 0)) %>%
# Drop lines without recordings (primarily for Prem and Rove who had 10 second clips)
na.omit()
# Calculate time spent vigilant
vigilance <- video %>%
group_by(bird) %>%
summarise(z = sum(grepl("Z", behaviour)),
L = length(behaviour) - z,
v = sum(vigilant),
pv = v/L)
# Plot proportion of time spent vigilant by bird
ggplot(vigilance) +
geom_bar(aes(bird, pv), position = "dodge", stat = "identity")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x= element_blank(), y = "Proportion of time spent vigilant")+
scale_x_discrete(guide = guide_axis(angle = 45)) +
theme_minimal()
# Join vigilance and survival data
m3_data <- survival %>%
mutate(survived = ifelse(persist<360, 0, 1),
persist = ifelse(persist>360, 360, persist)) %>%
select(c("bird", "persist", "survived")) %>%
left_join(vigilance)
# Read in survival data
survival <- read.csv("Input/survival.csv") %>%
clean_names() %>%
rename(bird = identity) %>%
filter(bird %in% birds)
# Join vigilance and survival data
m3_data <- survival %>%
mutate(survived = ifelse(persist<360, 0, 1),
persist = ifelse(persist>360, 360, persist)) %>%
select(c("bird", "persist", "survived")) %>%
left_join(vigilance)
# m3a: Does vigilance predict survival?
ggplot(m3_data)+
geom_boxplot(aes(survived, pv, group = survived))+
labs(y = "Proportion of time spent vigilant")+
theme_minimal()
m3a <- glmmTMB(survived ~ pv,
data = m3_data,
family = binomial)
summary(m3a)
View(survival)
View(m3_data)
View(video)
unique(video$bird)
